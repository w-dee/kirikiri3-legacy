// generated by tools/opecodes.rb
// do not edit this file by hand

//! @brief RisseVMInsnInfoのMemberNameが参照する文字列領域
//! @note この領域は tRisseString の文字列ポインタが指す先と
//!       同じレイアウトになっている
static risse_char RisseOperatorMemberNames [] = {
/*   0, offset=+   0 */
/*   1, offset=+   0 */
/*   2, offset=+   0 */
/*   3, offset=+   0 */
/*   4, offset=+   0 */
/*   5, offset=+   0 */
/*   6, offset=+   0 */
/*   7, offset=+   0 */
/*   8, offset=+   0 */
/*   9, offset=+   0 */
/*  10, offset=+   0 */
/*  11, offset=+   0 */
/*  12, offset=+   0 */
/*  13, offset=+   0 */
/*  14, offset=+   0 */
/*  15, offset=+   0 */tRisseStringData::MightBeShared,'n','e','w',0,0xc7fea6cd,
/*  16, offset=+   6 */
/*  17, offset=+   6 */
/*  18, offset=+   6 */
/*  19, offset=+   6 */
/*  20, offset=+   6 */
/*  21, offset=+   6 */
/*  22, offset=+   6 */
/*  23, offset=+   6 */
/*  24, offset=+   6 */
/*  25, offset=+   6 */
/*  26, offset=+   6 */
/*  27, offset=+   6 */
/*  28, offset=+   6 */
/*  29, offset=+   6 */
/*  30, offset=+   6 */tRisseStringData::MightBeShared,'~',0,0xff65fea8,
/*  31, offset=+  10 */tRisseStringData::MightBeShared,'-','-',0,0x4078cde9,
/*  32, offset=+  15 */tRisseStringData::MightBeShared,'+','+',0,0xd7fe7f8a,
/*  33, offset=+  20 */tRisseStringData::MightBeShared,'+','@',0,0xbf694df8,
/*  34, offset=+  25 */tRisseStringData::MightBeShared,'-','@',0,0x975efba0,
/*  35, offset=+  30 */tRisseStringData::MightBeShared,'t','o','S','t','r','i','n','g',0,0x0e037fe7,
/*  36, offset=+  41 */tRisseStringData::MightBeShared,'t','o','B','o','o','l','e','a','n',0,0x933dbb40,
/*  37, offset=+  53 */tRisseStringData::MightBeShared,'t','o','R','e','a','l',0,0xdf35b6b0,
/*  38, offset=+  62 */tRisseStringData::MightBeShared,'t','o','I','n','t','e','g','e','r',0,0xf72737b9,
/*  39, offset=+  74 */tRisseStringData::MightBeShared,'|','|',0,0xbe2a6c93,
/*  40, offset=+  79 */tRisseStringData::MightBeShared,'&','&',0,0x3c194d32,
/*  41, offset=+  84 */tRisseStringData::MightBeShared,'|',0,0xdbdb3793,
/*  42, offset=+  88 */tRisseStringData::MightBeShared,'^',0,0xb51a6a1a,
/*  43, offset=+  92 */tRisseStringData::MightBeShared,'&',0,0xb672ecdb,
/*  44, offset=+  96 */tRisseStringData::MightBeShared,'!','=',0,0xc29e5fee,
/*  45, offset=+ 101 */tRisseStringData::MightBeShared,'=','=',0,0xbb63b011,
/*  46, offset=+ 106 */tRisseStringData::MightBeShared,'!','=','=',0,0x29bd9ad5,
/*  47, offset=+ 112 */tRisseStringData::MightBeShared,'=','=','=',0,0x61645e2e,
/*  48, offset=+ 118 */tRisseStringData::MightBeShared,'<',0,0x496f92ce,
/*  49, offset=+ 122 */tRisseStringData::MightBeShared,'>',0,0x6df35bd5,
/*  50, offset=+ 126 */tRisseStringData::MightBeShared,'<','=',0,0x0300c052,
/*  51, offset=+ 131 */tRisseStringData::MightBeShared,'>','=',0,0x56786510,
/*  52, offset=+ 136 */tRisseStringData::MightBeShared,'>','>','>',0,0xeb980674,
/*  53, offset=+ 142 */tRisseStringData::MightBeShared,'<','<',0,0xdd3df4cd,
/*  54, offset=+ 147 */tRisseStringData::MightBeShared,'>','>',0,0xe8b08972,
/*  55, offset=+ 152 */tRisseStringData::MightBeShared,'%',0,0xa55f4ab4,
/*  56, offset=+ 156 */tRisseStringData::MightBeShared,'/',0,0x5a873501,
/*  57, offset=+ 160 */tRisseStringData::MightBeShared,'\\',0,0x919da321,
/*  58, offset=+ 164 */tRisseStringData::MightBeShared,'*',0,0xff387e65,
/*  59, offset=+ 168 */tRisseStringData::MightBeShared,'+',0,0x11e1a3b7,
/*  60, offset=+ 172 */tRisseStringData::MightBeShared,'-',0,0x371a6e28,
/*  61, offset=+ 176 */
/*  62, offset=+ 176 */
/*  63, offset=+ 176 */
/*  64, offset=+ 176 */tRisseStringData::MightBeShared,'[',']',0,0x321b7cff,
/*  65, offset=+ 181 */
/*  66, offset=+ 181 */tRisseStringData::MightBeShared,'d','e','l','e','t','e','[',']',0,0xa063490b,
/*  67, offset=+ 192 */
/*  68, offset=+ 192 */
/*  69, offset=+ 192 */
/*  70, offset=+ 192 */tRisseStringData::MightBeShared,'[',']','=',0,0xcdc754c6,
/*  71, offset=+ 198 */tRisseStringData::MightBeShared,'&','=',0,0xf73fc38c,
/*  72, offset=+ 203 */tRisseStringData::MightBeShared,'|','=',0,0x3940e28e,
/*  73, offset=+ 208 */tRisseStringData::MightBeShared,'^','=',0,0x68e166fa,
/*  74, offset=+ 213 */tRisseStringData::MightBeShared,'-','=',0,0x9ae502b0,
/*  75, offset=+ 218 */tRisseStringData::MightBeShared,'+','=',0,0x14807825,
/*  76, offset=+ 223 */tRisseStringData::MightBeShared,'%','=',0,0xbc1a4e72,
/*  77, offset=+ 228 */tRisseStringData::MightBeShared,'/','=',0,0x913a6d17,
/*  78, offset=+ 233 */tRisseStringData::MightBeShared,'\\','=',0,0xd31cbda3,
/*  79, offset=+ 238 */tRisseStringData::MightBeShared,'*','=',0,0x3e43cd2b,
/*  80, offset=+ 243 */tRisseStringData::MightBeShared,'|','|','=',0,0x3c1d903a,
/*  81, offset=+ 249 */tRisseStringData::MightBeShared,'&','&','=',0,0x0220217d,
/*  82, offset=+ 255 */tRisseStringData::MightBeShared,'>','>','>','=',0,0x43b190ce,
/*  83, offset=+ 262 */tRisseStringData::MightBeShared,'<','<','=',0,0x7d38fd56,
/*  84, offset=+ 268 */tRisseStringData::MightBeShared,'>','>','=',0,0x222ef3a1,
/*  85, offset=+ 274 */
/*  86, offset=+ 274 */
/*  87, offset=+ 274 */
/*  88, offset=+ 274 */
/*  89, offset=+ 274 */
/*  90, offset=+ 274 */
/*  91, offset=+ 274 */
/*  92, offset=+ 274 */
/*  93, offset=+ 274 */
/*  94, offset=+ 274 */
/*  95, offset=+ 274 */
/*  96, offset=+ 274 */
/*  97, offset=+ 274 */
/*  98, offset=+ 274 */
/*  99, offset=+ 274 */
/* 100, offset=+ 274 */
};
const tRisseVMInsnInfo RisseVMInsnInfo[] = {
/*   0 */ {"NoOperation", "nop", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  なにもしない */},
/*   1 */ {"Assign", "copy", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = (ローカル変数の代入) */},
/*   2 */ {"AssignConstant", "const", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifConstant,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 定数の代入 */},
/*   3 */ {"AssignThis", "this", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = thisの代入 */},
/*   4 */ {"AssignSuper", "super", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = superの代入 */},
/*   5 */ {"AssignGlobal", "global", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = globalの代入 */},
/*   6 */ {"AssignNewArray", "array", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しい配列オブジェクトの代入 */},
/*   7 */ {"AssignNewDict", "dict", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しい辞書配列オブジェクトの代入 */},
/*   8 */ {"AssignNewRegExp", "regexp", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しい正規表現オブジェクトの代入 (引数2つ) */},
/*   9 */ {"AssignNewClass", "class", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しいクラスインスタンスの代入 (引数=親クラス+クラス名) */},
/*  10 */ {"AssignNewModule", "module", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しいモジュールインスタンスの代入 (引数=モジュール名) */},
/*  11 */ {"AssignParam", "param", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifParameter,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = (O番目の関数引数を代入) */},
/*  12 */ {"AssignBlockParam", "bparam", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifParameter,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = (O番目の関数ブロック引数を代入) */},
/*  13 */ {"Write", "swrite", {tRisseVMInsnInfo::vifShared,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  共有空間への書き込み */},
/*  14 */ {"Read", "sread", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifShared,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  共有空間からの読み込み */},
/*  15 */ {"New", "new", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,tRisseVMInsnInfo::vifNumber,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+1,3} /*  "new" */},
/*  16 */ {"TryFuncCall", "trycall", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,tRisseVMInsnInfo::vifNumber,tRisseVMInsnInfo::vifNumber,(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  try function call */},
/*  17 */ {"FuncCall", "call", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,tRisseVMInsnInfo::vifNumber,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  function call */},
/*  18 */ {"FuncCallBlock", "callb", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,tRisseVMInsnInfo::vifNumber,tRisseVMInsnInfo::vifNumber,(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  function call with lazyblock(VMのみで使用) */},
/*  19 */ {"SetFrame", "sframe", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  スタックフレームと共有空間を設定する */},
/*  20 */ {"SetShare", "sshare", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  共有空間のみ設定する */},
/*  21 */ {"Jump", "jump", {tRisseVMInsnInfo::vifAddress,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  単純なジャンプ */},
/*  22 */ {"Branch", "branch", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifAddress,tRisseVMInsnInfo::vifAddress,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  分岐 */},
/*  23 */ {"CatchBranch", "cbranch", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifConstant,tRisseVMInsnInfo::vifNumber,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  例外catch用の分岐 */},
/*  24 */ {"Return", "return", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  return ステートメント */},
/*  25 */ {"Debugger", "debug", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  debugger ステートメント */},
/*  26 */ {"Throw", "throw", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  throw ステートメント */},
/*  27 */ {"ExitTryException", "exittry", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifConstant,tRisseVMInsnInfo::vifOthers,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  Try脱出用例外を発生させる */},
/*  28 */ {"GetExitTryValue", "exitval", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  Try脱出用例外オブジェクトから値を得る */},
/*  29 */ {"LogNot", "lnot", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  "!" logical not */},
/*  30 */ {"BitNot", "bnot", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+7,1} /*  "~" bit not */},
/*  31 */ {"DecAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+11,2} /*  "--" decrement */},
/*  32 */ {"IncAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+16,2} /*  ++ increment */},
/*  33 */ {"Plus", "plus", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+21,2} /*  + */},
/*  34 */ {"Minus", "minus", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+26,2} /*  - */},
/*  35 */ {"String", "string", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+31,8} /*  文字列にキャスト */},
/*  36 */ {"Boolean", "boolean", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+42,9} /*  booleanにキャスト */},
/*  37 */ {"Real", "real", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+54,6} /*  realにキャスト */},
/*  38 */ {"Integer", "int", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+63,9} /*  integerにキャスト */},
/*  39 */ {"LogOr", "lor", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+75,2} /*  || */},
/*  40 */ {"LogAnd", "land", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+80,2} /*  && */},
/*  41 */ {"BitOr", "bor", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+85,1} /*  | */},
/*  42 */ {"BitXor", "bxor", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+89,1} /*  ^ */},
/*  43 */ {"BitAnd", "band", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+93,1} /*  & */},
/*  44 */ {"NotEqual", "ne", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+97,2} /*  != */},
/*  45 */ {"Equal", "eq", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+102,2} /*  == */},
/*  46 */ {"DiscNotEqual", "dne", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+107,3} /*  !== */},
/*  47 */ {"DiscEqual", "deq", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+113,3} /*  === */},
/*  48 */ {"Lesser", "lt", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+119,1} /*  < */},
/*  49 */ {"Greater", "gt", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+123,1} /*  > */},
/*  50 */ {"LesserOrEqual", "lte", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+127,2} /*  <= */},
/*  51 */ {"GreaterOrEqual", "gte", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+132,2} /*  >= */},
/*  52 */ {"RBitShift", "rbs", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+137,3} /*  >>> */},
/*  53 */ {"LShift", "ls", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+143,2} /*  << */},
/*  54 */ {"RShift", "rs", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+148,2} /*  >> */},
/*  55 */ {"Mod", "mod", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+153,1} /*  % */},
/*  56 */ {"Div", "div", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+157,1} /*  / */},
/*  57 */ {"Idiv", "idiv", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+161,1} /*  \ (integer div) */},
/*  58 */ {"Mul", "mul", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+165,1} /*  * */},
/*  59 */ {"Add", "add", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+169,1} /*  + */},
/*  60 */ {"Sub", "sub", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+173,1} /*  - */},
/*  61 */ {"IncontextOf", "chgc", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  incontextof */},
/*  62 */ {"DGet", "dget", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  get .   */},
/*  63 */ {"DGetF", "dgetf", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  get . with flags (下記参照) */},
/*  64 */ {"IGet", "iget", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+177,2} /*  get [ ] */},
/*  65 */ {"DDelete", "ddel", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  delete . */},
/*  66 */ {"IDelete", "idel", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+182,8} /*  delete [ ] */},
/*  67 */ {"DSetAttrib", "dseta", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  set member attribute */},
/*  68 */ {"DSet", "dset", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  set . */},
/*  69 */ {"DSetF", "dsetf", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  set . with flags (下記参照) */},
/*  70 */ {"ISet", "iset", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+193,3} /*  set [ ] */},
/*  71 */ {"BitAndAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+199,2} /*  &= */},
/*  72 */ {"BitOrAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+204,2} /*  |= */},
/*  73 */ {"BitXorAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+209,2} /*  ^= */},
/*  74 */ {"SubAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+214,2} /*  -= */},
/*  75 */ {"AddAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+219,2} /*  += */},
/*  76 */ {"ModAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+224,2} /*  %= */},
/*  77 */ {"DivAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+229,2} /*  /= */},
/*  78 */ {"IdivAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+234,2} /*  \= */},
/*  79 */ {"MulAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+239,2} /*  *= */},
/*  80 */ {"LogOrAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+244,3} /*  ||= */},
/*  81 */ {"LogAndAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+250,3} /*  &&= */},
/*  82 */ {"RBitShiftAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+256,4} /*  >>>= */},
/*  83 */ {"LShiftAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+263,3} /*  <<= */},
/*  84 */ {"RShiftAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RisseOperatorMemberNames+269,3} /*  >>= */},
/*  85 */ {"VMCodeLast", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  VMオペコードの最後 */},
/*  86 */ {"SetDefaultContext", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  メンバを読み出すときにコンテキストがnullだった場合のデフォルトのコンテキストをインスタンスに対して設定する */},
/*  87 */ {"GetDefaultContext", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  メンバを読み出すときにコンテキストがnullだった場合のデフォルトのコンテキストをインスタンスから取得する */},
/*  88 */ {"CreateNewObjectBase", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  クラスから新しいインスタンスを作成する際のベースとなるオブジェクトを新たに作成して返す */},
/*  89 */ {"Phi", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  φ関数 */},
/*  90 */ {"DefineAccessMap", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  アクセスマップ定義 */},
/*  91 */ {"DefineLazyBlock", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  遅延評価ブロックの定義 */},
/*  92 */ {"DefineClass", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  クラスの定義 */},
/*  93 */ {"EndAccessMap", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  アクセスマップの使用終了 */},
/*  94 */ {"ParentWrite", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  親名前空間への書き込み */},
/*  95 */ {"ParentRead", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  親名前空間からの読み込み */},
/*  96 */ {"ChildWrite", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  子名前空間への書き込み */},
/*  97 */ {"ChildRead", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  子名前空間からの読み込み */},
/*  98 */ {"WriteVar", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  変数への書き込み(変換の過程でocAssignかocWriteに変わる) */},
/*  99 */ {"ReadVar", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  変数からの読み込み(変換の過程でocAssignかocReadに変わる) */},
/* 100 */ {"OpCodeLast", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  オペコードの最後 */},
};
