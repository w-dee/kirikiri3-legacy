// generated by tools/static_strings.rb
// do not edit this file by hand

extern const tRisseStringData RisseStaticStringTable[];

static const tRisseString & ss_initialize = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+0); //!< (演算子メンバ名)  "initialize" メソッド名
static const tRisseString & ss_construct = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+1); //!< (演算子メンバ名)  "construct" メソッド名
static const tRisseString & ss_fertilize = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+2); //!< (演算子メンバ名)  "fertilize" メソッド名
static const tRisseString & ss_getInstanceMember = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+3); //!< (演算子メンバ名)  "getInstanceMember" メソッド名
static const tRisseString & ss_setInstanceMember = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+4); //!< (演算子メンバ名)  "setInstanceMember" メソッド名
static const tRisseString & ss_Object = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+5); //!< (演算子メンバ名)  "Object" クラス名
static const tRisseString & ss_Module = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+6); //!< (演算子メンバ名)  "Module" モジュール名
static const tRisseString & ss_Class = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+7); //!< (演算子メンバ名)  "Class" クラス名
static const tRisseString & ss_Function = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+8); //!< (演算子メンバ名)  "Function" クラス名
static const tRisseString & ss_Array = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+9); //!< (演算子メンバ名)  "Array" クラス名
static const tRisseString & ss_Primitive = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+10); //!< (演算子メンバ名)  "Primitive" クラス名
static const tRisseString & ss_String = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+11); //!< (演算子メンバ名)  "String" クラス名
static const tRisseString & ss_Number = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+12); //!< (演算子メンバ名)  "Number" クラス名
static const tRisseString & ss_Integer = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+13); //!< (演算子メンバ名)  "Integer" クラス名
static const tRisseString & ss_Property = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+14); //!< (演算子メンバ名)  "Property" クラス名
static const tRisseString & ss_Real = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+15); //!< (演算子メンバ名)  "Real" クラス名
static const tRisseString & ss_prototype = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+16); //!< (演算子メンバ名)  "prototype" インスタンス変数/プロパティ名
static const tRisseString & ss_modules = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+17); //!< (演算子メンバ名)  "modules" インスタンス変数/プロパティ名
static const tRisseString & ss_push = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+18); //!< (演算子メンバ名)  "push" メソッド名
static const tRisseString & ss_pop = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+19); //!< (演算子メンバ名)  "pop" メソッド名
static const tRisseString & ss_unshift = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+20); //!< (演算子メンバ名)  "unshift" メソッド名
static const tRisseString & ss_shift = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+21); //!< (演算子メンバ名)  "shift" メソッド名
static const tRisseString & ss_charAt = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+22); //!< (演算子メンバ名)  "charAt" メソッド名
static const tRisseString & ss_length = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+23); //!< (演算子メンバ名)  "length" プロパティ名
static const tRisseString & ss_times = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+24); //!< (演算子メンバ名)  "times" メソッド名
static const tRisseString & ss_isNaN = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+25); //!< (演算子メンバ名)  "isNaN" プロパティ名
static const tRisseString & ss_filler = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+26); //!< (演算子メンバ名)  "filler" インスタンス変数/プロパティ名
static const tRisseString & ss_include = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+27); //!< (演算子メンバ名)  "include" メソッド名
static const tRisseString & ss_Throwable = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+28); //!< (演算子メンバ名)  "Throwable" クラス名
static const tRisseString & ss_message = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+29); //!< (演算子メンバ名)  "message" インスタンス変数/プロパティ名
static const tRisseString & ss_trace = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+30); //!< (演算子メンバ名)  "trace" インスタンス変数/プロパティ名
static const tRisseString & ss_cause = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+31); //!< (演算子メンバ名)  "cause" インスタンス変数/プロパティ名
static const tRisseString & ss_addTrace = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+32); //!< (演算子メンバ名)  "addTrace" メソッド名
static const tRisseString & ss_SourcePoint = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+33); //!< (演算子メンバ名)  "SourcePoint" クラス名
static const tRisseString & ss_filename = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+34); //!< (演算子メンバ名)  "filename" ファイル名
static const tRisseString & ss_line = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+35); //!< (演算子メンバ名)  "line" インスタンス変数/プロパティ名
static const tRisseString & ss_Exception = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+36); //!< (演算子メンバ名)  "Exception" クラス名
static const tRisseString & ss_p = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+37); //!< (演算子メンバ名)  "p" メソッド名
static const tRisseString & ss_isA = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+38); //!< (演算子メンバ名)  "isA" メソッド名
static const tRisseString & ss_BlockExitException = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+39); //!< (演算子メンバ名)  "BlockExitException" クラス名
static const tRisseString & ss_identifier = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+40); //!< (演算子メンバ名)  "identifier" インスタンス変数/プロパティ名
static const tRisseString & ss_target = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+41); //!< (演算子メンバ名)  "target" インスタンス変数/プロパティ名
static const tRisseString & ss_value = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+42); //!< (演算子メンバ名)  "value" インスタンス変数/プロパティ名
static const tRisseString & ss_Error = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+43); //!< (演算子メンバ名)  "Error" クラス名
static const tRisseString & ss_RuntimeException = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+44); //!< (演算子メンバ名)  "RuntimeException" クラス名
static const tRisseString & ss_toException = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+45); //!< (演算子メンバ名)  "toException" 
static const tRisseString & ss_break = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+46); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_continue = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+47); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_const = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+48); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_catch = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+49); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_class = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+50); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_case = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+51); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_debugger = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+52); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_default = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+53); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_delete = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+54); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_do = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+55); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_dynamic = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+56); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_extends = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+57); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_export = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+58); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_enum = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+59); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_else = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+60); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_function = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+61); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_finally = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+62); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_final = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+63); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_for = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+64); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_global = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+65); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_getter = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+66); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_goto = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+67); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_incontextof = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+68); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_invalidate = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+69); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_instanceof = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+70); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_isvalid = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+71); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_import = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+72); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_int = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+73); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_internal = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+74); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_in = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+75); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_if = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+76); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_module = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+77); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_new = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+78); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_octet = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+79); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_protected = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+80); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_property = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+81); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_private = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+82); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_public = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+83); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_return = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+84); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_real = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+85); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_synchronized = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+86); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_switch = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+87); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_static = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+88); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_setter = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+89); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_string = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+90); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_super = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+91); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_typeof = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+92); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_throw = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+93); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_this = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+94); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_try = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+95); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_var = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+96); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_while = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+97); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_with = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+98); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_as = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+99); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_use = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+100); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_abstract = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+101); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_implements = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+102); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_interface = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+103); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_native = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+104); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_throws = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+105); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_transient = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+106); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_volatile = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+107); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_enumerable = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+108); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_hidden = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+109); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_void = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+110); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_null = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+111); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_true = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+112); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_false = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+113); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_NaN = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+114); //!< (演算子メンバ名) トークンの値
static const tRisseString & ss_Infinity = *reinterpret_cast<const tRisseString *>(RisseStaticStringTable+115); //!< (演算子メンバ名) トークンの値
