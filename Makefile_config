###### 設定

XGETTEXT = xgettext
MSGMERGE = msgmerge
MSGFMT = msgfmt


###### CPU ごとの最適化オプションのチェック

CPU_OPTIONS=

ifdef USE_SSE
 # SSE を使用する場合は自動的にMMXも使用
 USE_MMX=1
endif

ifdef USE_SSE
 CPU_OPTIONS = -msse -DRISA_USE_SSE
else
ifdef USE_MMX
 CPU_OPTIONS = -msse -DRISE_USE_MMX
endif
endif


###### CFLAGS と CXXFLAGS や CPPFLAGS


# 標準の CFLAGS など

COMMON_CFLAGS   = -Winvalid-pch -I./$(PLATFORM_SUBDIR) $(CPU_OPTIONS)
COMMON_CXXFLAGS = -Winvalid-pch -I./$(PLATFORM_SUBDIR) $(CPU_OPTIONS)
COMMON_CPPFLAGS = -Winvalid-pch -I./$(PLATFORM_SUBDIR) $(CPU_OPTIONS)

# コンパイラなどのツールについては、ベースは wxWidgets の設定を用いる

# wx-config の名前
WXWIDGETS_CONFIG = $(WXWIDGETS_DIR)/bin/wx-config

# wx-config に渡す標準のオプション
WXWIDGETS_CONFIG_BASE_ARG=--unicode
WXWIDGETS_CONFIG_ARG=$(WXWIDGETS_CONFIG_BASE_ARG)

# freetype-config の名前
FREETYPE_CONFIG = $(FREETYPE_DIR)/bin/freetype-config

# freetype-config に渡す標準のオプション
FREETYPE_CONFIG_BASE_ARG=
FREETYPE_CONFIG_ARG=$(FREETYPE_CONFIG_BASE_ARG)

# openal-config の名前
OPENAL_CONFIG = $(OPENAL_DIR)/bin/openal-config

# openal-config に渡す標準のオプション
OPENAL_CONFIG_BASE_ARG=
OPENAL_CONFIG_ARG=$(OPENAL_CONFIG_BASE_ARG)

# 使用するフラグなどを調べる
# wx-config の --libs の出力するフラグのうち、-Wl,--subsystem,windows と
# -mwindows はアプリケーションによっては必要が無いので削除する

MAKEFILE_BUILD_CONFIG_RELEASE = $(TOP_DIR)/Makefile_build_config_release
MAKEFILE_BUILD_CONFIG_DEBUG   = $(TOP_DIR)/Makefile_build_config_debug
MAKEFILE_BUILD_CONFIGS = $(MAKEFILE_BUILD_CONFIG_RELEASE) $(MAKEFILE_BUILD_CONFIG_DEBUG)

$(MAKEFILE_BUILD_CONFIGS) : $(TOP_DIR)/Makefile_config $(WXWIDGETS_CONFIG)
	@echo "Gathering build environment information ..."
	@rm -f $(TOP_DIR)/config_success
	@rm -f $(MAKEFILE_BUILD_CONFIG_RELEASE) $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@#-----------------------------------------------------------------------------
	@echo "wxWidgets ..."
	@(set -e ;\
		get() { \
			echo "####  wxWidgets config: $(WXWIDGETS_CONFIG_ARG) $$conf ####" ;\
			echo  -n "CC := " ;\
				$(WXWIDGETS_CONFIG) $(WXWIDGETS_CONFIG_ARG) $$conf --cc ;\
			echo  -n "CXX := " ;\
				$(WXWIDGETS_CONFIG) $(WXWIDGETS_CONFIG_ARG) $$conf --cxx ;\
			echo  -n "WX_CFLAGS := $$comflags " ;\
				$(WXWIDGETS_CONFIG) $(WXWIDGETS_CONFIG_ARG) $$conf --cflags ;\
			echo  -n "WX_CXXFLAGS := $$comflags " ;\
				$(WXWIDGETS_CONFIG) $(WXWIDGETS_CONFIG_ARG) $$conf --cxxflags ;\
			echo  -n "WX_CPPFLAGS := $$comflags " ;\
				$(WXWIDGETS_CONFIG) $(WXWIDGETS_CONFIG_ARG) $$conf --cppflags ;\
			echo  -n "WX_LIBS := " ;\
				$(WXWIDGETS_CONFIG) $(WXWIDGETS_CONFIG_ARG) $$conf --libs | \
					sed -e "s|-Wl,--subsystem,windows||g" -e "s|-mwindows||g" ;\
		};\
		comflags="-Wall -O2 ";       conf=--debug=no;  get >> $(MAKEFILE_BUILD_CONFIG_RELEASE) ;\
		comflags="-Wall -g -DDEBUG"; conf=--debug=yes; get >> $(MAKEFILE_BUILD_CONFIG_DEBUG)   ;\
		touch $(TOP_DIR)/config_success ;\
	)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: wxWidgets configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "zlib ..."
	@(set -e ;\
		echo "####  zlib config  ####" ;\
		echo "ZLIB_LIBS := -L$(ZLIB_DIR)/lib -lz" ;\
		echo "ZLIB_CFLAGS   := -I$(ZLIB_DIR)/include" ;\
		echo "ZLIB_CXXFLAGS := -I$(ZLIB_DIR)/include" ;\
		echo "ZLIB_CPPFLAGS := -I$(ZLIB_DIR)/include" ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: zlib configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "libtomcrypt ..."
	@(set -e ;\
		echo "####  libtomcrypt config  ####" ;\
		echo "LIBTOMCRYPT_CFLAGS   := -I$(LIBTOMCRYPT_DIR)/include" ;\
		echo "LIBTOMCRYPT_CXXFLAGS := -I$(LIBTOMCRYPT_DIR)/include" ;\
		echo "LIBTOMCRYPT_CPPFLAGS := -I$(LIBTOMCRYPT_DIR)/include" ;\
		echo "LIBTOMCRYPT_LIBS := -L$(LIBTOMCRYPT_DIR)/lib -ltomcrypt" ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: libtomcrypt configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "freetype ..."
	@(set -e ;\
		get() { \
			echo "####  freetype config ####" ;\
			echo  -n "FREETYPE_CFLAGS := " ;\
				$(FREETYPE_CONFIG) $(FREETYPE_CONFIG_ARG) --cflags ;\
			echo  -n "FREETYPE_CXXFLAGS := " ;\
				$(FREETYPE_CONFIG) $(FREETYPE_CONFIG_ARG) --cflags ;\
			echo  -n "FREETYPE_CPPFLAGS := " ;\
				$(FREETYPE_CONFIG) $(FREETYPE_CONFIG_ARG) --cflags ;\
			echo  -n "FREETYPE_LIBS := " ;\
				$(FREETYPE_CONFIG) $(FREETYPE_CONFIG_ARG) --libs ;\
		};\
		get ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: freetype configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "boost ..."
	@(set -e ;\
		get() { \
			boost_include_dir=`echo $(BOOST_DIR)/include/boost-*`  ;\
			if [ `echo $$boost_include_dir | wc -w` -gt 1 ]; then \
				echo "error: multiple directories in $(BOOST_DIR)/include . " 1>&2 ;\
				echo " did you installed multiple versions of boost library ? " 1>&2 ;\
				echo "(shoud be one version in 'external' directory)"  1>&2 ;\
				exit 1; \
			fi ;\
			boost_lib_dir=$(BOOST_DIR)/lib                  ;\
			echo "####  boost config ####"                  ;\
			echo  "BOOST_CFLAGS   := -I$$boost_include_dir" ;\
			echo  "BOOST_CXXFLAGS := -I$$boost_include_dir" ;\
			echo  "BOOST_CPPFLAGS := -I$$boost_include_dir" ;\
			echo  "BOOST_LIBS     := -L$$boost_lib_dir"     ;\
			boost_libs=`cd $(BOOST_DIR)/lib/; echo libboost_*-*$$mt$$static_debug-?_*.a`; \
			for lib in $$boost_libs; do \
				libname=`echo -n $$lib | sed -e "s|^lib||" -e "s|-.*\\$$||" | tr '[a-z]' '[A-Z]'` ;\
				echo    "$${libname}_CFLAGS   :=" ;\
				echo    "$${libname}_CXXFLAGS :=" ;\
				echo    "$${libname}_CPPFLAGS :=" ;\
				echo -n "$${libname}_LIBS     := -l" ;\
				echo $$lib | sed -e "s|^lib||" -e "s|.a\$$||" ;\
			done ;\
		};\
		mt="-mt" static_debug="";   get >> $(MAKEFILE_BUILD_CONFIG_RELEASE) ;\
		mt="-mt" static_debug="-d"; get >> $(MAKEFILE_BUILD_CONFIG_DEBUG)   ;\
		touch $(TOP_DIR)/config_success ;\
	)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: boost configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "libjpeg ..."
	@(set -e ;\
		if [ -f $(LIBJPEG_DIR)/lib/libjpeg.dll.a ]; then LIBJPEG_LIBNAME=jpeg.dll; else LIBJPEG_LIBNAME=jpeg; fi; \
		echo "####  libjpeg config  ####" ;\
		echo "LIBJPEG_CFLAGS   := -I$(LIBJPEG_DIR)/include" ;\
		echo "LIBJPEG_CXXFLAGS := -I$(LIBJPEG_DIR)/include" ;\
		echo "LIBJPEG_CPPFLAGS := -I$(LIBJPEG_DIR)/include" ;\
		echo "LIBJPEG_LIBS     := -L$(LIBJPEG_DIR)/lib -l$$LIBJPEG_LIBNAME" ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: libjpeg configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "libpng ..."
	@(set -e ;\
		if [ -f $(LIBPNG_DIR)/lib/libpng.dll.a ]; then LIBPNG_LIBNAME=png.dll; else LIBPNG_LIBNAME=png; fi; \
		echo "####  libpng config  ####" ;\
		echo "LIBPNG_CFLAGS   := -I$(LIBPNG_DIR)/include" ;\
		echo "LIBPNG_CXXFLAGS := -I$(LIBPNG_DIR)/include" ;\
		echo "LIBPNG_CPPFLAGS := -I$(LIBPNG_DIR)/include" ;\
		echo "LIBPNG_LIBS     := -L$(LIBPNG_DIR)/lib -l$$LIBPNG_LIBNAME" ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: libpng configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "libogg ..."
	@(set -e ;\
		if [ -f $(LIBOGG_DIR)/lib/libogg.dll.a ]; then LIBOGG_LIBNAME=ogg.dll; else LIBOGG_LIBNAME=ogg; fi; \
		echo "####  libogg config  ####" ;\
		echo "LIBOGG_CFLAGS   := -I$(LIBOGG_DIR)/include" ;\
		echo "LIBOGG_CXXFLAGS := -I$(LIBOGG_DIR)/include" ;\
		echo "LIBOGG_CPPFLAGS := -I$(LIBOGG_DIR)/include" ;\
		echo "LIBOGG_LIBS     := -L$(LIBOGG_DIR)/lib -l$$LIBOGG_LIBNAME" ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: libogg configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "libvorbis ..."
	@(set -e ;\
		if [ -f $(LIBVORBIS_DIR)/lib/libvorbis.dll.a ]; then LIBVORBIS_LIBNAME=vorbis.dll; else LIBVORBIS_LIBNAME=vorbis; fi; \
		if [ -f $(LIBVORBIS_DIR)/lib/libvorbisfile.dll.a ]; then LIBVORBISFILE_LIBNAME=vorbisfile.dll; else LIBVORBISFILE_LIBNAME=vorbisfile; fi; \
		echo "####  libvorbis config  ####" ;\
		echo "LIBVORBIS_CFLAGS   := -I$(LIBVORBIS_DIR)/include" ;\
		echo "LIBVORBIS_CXXFLAGS := -I$(LIBVORBIS_DIR)/include" ;\
		echo "LIBVORBIS_CPPFLAGS := -I$(LIBVORBIS_DIR)/include" ;\
		echo "LIBVORBIS_LIBS     := -L$(LIBVORBIS_DIR)/lib -l$$LIBVORBIS_LIBNAME -l$$LIBVORBISFILE_LIBNAME" ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: libvorbis configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "openal ..."
	@(set -e ;\
		echo "####  openal config  ####" ;\
		OPENAL_LIBS=`$(OPENAL_CONFIG) $(OPENAL_CONFIG_ARG) --libs` ;\
		if [ -f $(OPENAL_DIR)/lib/libopenal.dll.a ] ; then \
			OPENAL_LIBS=`echo "$$OPENAL_LIBS" | sed -e 's/-lopenal[^.]/-lopenal.dll/' -e 's/.dll.dll/.dll/'`; \
		fi; \
		echo -n "OPENAL_CFLAGS   := " ;\
			$(OPENAL_CONFIG) $(OPENAL_CONFIG_ARG) --cflags ;\
		echo -n "OPENAL_CXXFLAGS := " ;\
			$(OPENAL_CONFIG) $(OPENAL_CONFIG_ARG) --cflags ;\
		echo -n "OPENAL_CPPFLAGS := " ;\
			$(OPENAL_CONFIG) $(OPENAL_CONFIG_ARG) --cflags ;\
		echo -n "OPENAL_LIBS     := " ;\
			echo "$$OPENAL_LIBS" ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: openal configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "Boehm GC ..."
	@(set -e ;\
		echo "####  Boehm GC config  ####" ;\
		echo "GC_CFLAGS   := -I$(GC_DIR)/include" ;\
		echo "GC_CXXFLAGS := -I$(GC_DIR)/include" ;\
		echo "GC_CPPFLAGS := -I$(GC_DIR)/include" ;\
		echo "GC_LIBS     := -L$(GC_DIR)/lib -lgc" ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: Boehm GC configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "Hamigaki ..."
	@(set -e ;\
		echo "####  Hamigaki config  ####" ;\
		echo "HAMIGAKI_CFLAGS   := -I$(HAMIGAKI_DIR)/include" ;\
		echo "HAMIGAKI_CXXFLAGS := -I$(HAMIGAKI_DIR)/include" ;\
		echo "HAMIGAKI_CPPFLAGS := -I$(HAMIGAKI_DIR)/include" ;\
		echo "HAMIGAKI_LIBS     := " ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: Hamigaki configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success
	@#-----------------------------------------------------------------------------
	@echo "RisaGL ..."
	@(set -e ;\
		echo "####  RisaGL config  ####" ;\
		echo "RISAGL_CFLAGS   := -I$(RISAGL_DIR)/include" ;\
		echo "RISAGL_CXXFLAGS := -I$(RISAGL_DIR)/include" ;\
		echo "RISAGL_CPPFLAGS := -I$(RISAGL_DIR)/include" ;\
		echo "RISAGL_LIBS     := " ;\
		touch $(TOP_DIR)/config_success ;\
	) | tee -a $(MAKEFILE_BUILD_CONFIG_RELEASE) >> $(MAKEFILE_BUILD_CONFIG_DEBUG)
	@if [ ! -f $(TOP_DIR)/config_success ]; then echo "error: RisaGL configuration failed."; rm -f $(MAKEFILE_BUILD_CONFIGS); exit 1; fi
	@rm -f $(TOP_DIR)/config_success

ifeq ($(DEBUG),yes)
 -include $(TOP_DIR)/Makefile_build_config_debug
else
 -include $(TOP_DIR)/Makefile_build_config_release
endif

# note: 
# wxWidgets の吐く ld へのオプションは CXX へのオプションを
# 含んでいたりするので、リンカドライバとしては通常CXXを使う。
# 本物の「リンカ」を使わなければならないのは -r オプション
# で複数の .o ファイルを一つにまとめる場合。



# WXRC
# wxwidgets をインストールした位置の wxrc は DLL にパスが通ってない
# などの理由で実行できない場合があるので lib に path を通した上で
# 利用する

WXRC = $(LD_LIBRARY_PATH_ENV_NAME)=$$$(LD_LIBRARY_PATH_ENV_NAME):$(WXWIDGETS_DIR)/lib $(WXWIDGETS_DIR)/bin/wxrc
