include $(TOP_DIR)/Makefile_config


#### 最終ターゲット (ふつう、出力バイナリや出力ライブラリ)

target: prepare binary

prepare:
	$(MAKE) INCLUDE_MKTMP=yes make_prepare

ifdef BIN
  binary:
	$(MAKE) INCLUDE_MKTMP=yes INCLUDE_DEPS=yes $(BIN)
else
 ifdef LIB
  binary:
	$(MAKE) INCLUDE_MKTMP=yes INCLUDE_DEPS=yes $(LIB)
 endif
endif

make_prepare:
	if [ ! -d $(BUILD_OUT_DIR)/bin ]; then mkdir -p $(BUILD_OUT_DIR)/bin; fi


#### プロジェクトに必要なファイルなどを列挙して .mktmp に格納

CFLAGS_F    := $(patsubst %,$$(%_CFLAGS),$(DEP_LIBS))
CXXFLAGS_F  := $(patsubst %,$$(%_CXXFLAGS),$(DEP_LIBS))
CPPFLAGS_F  := $(patsubst %,$$(%_CPPFLAGS),$(DEP_LIBS))
LIBS_F      := $(patsubst %,$$(%_LIBS),$(DEP_LIBS))

.mktmp: Makefile
	echo 'DEFAULT_CFLAGS    := $(CFLAGS_F)'    >  .mktmp
	echo 'DEFAULT_CXXFLAGS  := $(CXXFLAGS_F)'  >> .mktmp
	echo 'DEFAULT_CPPFLAGS  := $(CPPFLAGS_F)'  >> .mktmp
	echo 'DEFAULT_LIBS      := $(LIBS_F)'      >> .mktmp

ifdef INCLUDE_MKTMP
 -include .mktmp
endif


###### 依存関係

ifdef INCLUDE_DEPS
 -include $(CPPFILES:.cpp=.d) $(CFILES:.c=.d)
endif

###### ルール

## C++ソース→オブジェクトファイル
%.o: %.cpp
	$(CXX) -c $(DEFAULT_CXXFLAGS) $(CXXFLAGS) $(INCLUDES) $< -o $@


## コンパイル済みヘッダ
%.h.gch: %.h
	$(CXX) $(DEFAULT_CXXFLAGS) $(CXXFLAGS) $(INCLUDES) $< -o $@

PREC_H_NAME ?= prec.h

$(PREC_H_NAME).gch: $(PREC_H_NAME)

## 依存関係記述ファイル
%.d: %.cpp
	$(SHELL) -ec '$(CC) -MM $(DEFAULT_CPPFLAGS) $(CPPFLAGS) $(INCLUDES) $< \
					  | sed "s|\($*\)\.o[ :]*|\1.o $@ : |g" > $@; \
					  [ -s $@ ] || rm -f $@'

## メッセージオブジェクト関連
%.mo: %.po
	$(MSGFMT) -o $@ $<
	mkdir -p $(BUILD_OUT_DIR)/share/locale/$(basename $(notdir $@))/LC_MESSAGES/
	cp $@ $(BUILD_OUT_DIR)/share/locale/$(basename $(notdir $@))/LC_MESSAGES/$(PROGRAM_ID).mo || rm $@

ifdef XRCFILES
 XRCMSG=.xrcmsg
endif

ifdef XRCFILES
 $(XRCMSG): $(XRCFILES)
	$(WXRC) --gettext $(XRCFILES) -o $(XRCMSG)
endif

messages.pot: $(CPPFILES) $(CFILES) $(XRCMSG)
	$(XGETTEXT) --from-code=utf-8 -c -C -k_ $^ -o - | \
		sed '/^.POT-Creation-Date:/d' > $@

PO_FILES=$(wildcard locale/*.po)

MESSAGE_OBJECTS=$(PO_FILES:.po=.mo)

$(MESSAGE_OBJECTS): $(PO_FILES)

$(PO_FILES): messages.pot
	$(MSGMERGE) --update $@ messages.pot
	touch $@

## XRC 関連

%.cpp: %.xrc
	mv $< $<.bak
	sed -e 's/^[	 ]*//g' -e 's/[	 ]*$$//g' -e '/^$$/d' $<.bak > $<
	rm -f $<.bak
	$(WXRC) --cpp-code --extra-cpp-code $<
	mv resource.cpp $@
	mv resource.h $(@:.cpp=.h)
	mv $@ $@.bak
	sed 's|<wx/wxprec.h>|"$(PREC_H_NAME)"|g' $@.bak > $@
	rm -f $@.bak


$(XRCFILES:.xrc=.cpp): $(XRCFILES)

## バイナリ

ifeq ($(suffix $(BIN)),.a)
# ライブラリの場合
 $(BIN) : $(BIN_DEPS) $(PREC_H_NAME).gch $(OBJS)
	rm -f $(BIN)
	$(AR) rs $(BIN) $(OBJS)
else
# executableの場合
 $(BIN): $(BIN_DEPS) $(PREC_H_NAME).gch $(OBJS) $(MESSAGE_OBJECTS)
	$(LD) $(LDFLAGS) $(OBJS) -o $(BIN) $(DEFAULT_LIBS) $(LIBS)
endif

## クリーン

clean:
	rm -f $(OBJS) $(BIN) $(PREC_H_NAME).gch $(CPPFILES:.cpp=.d) $(CFILES:.c=.d)
	rm -f messages.pot $(MESSAGE_OBJECTS)
	rm -f locale/*~
	rm -f .mktmp
	rm -f *.bak resource.cpp resource.h
	rm -f $(patsubst %.xrc,%.cpp,$(wildcard *.xrc))
	rm -f $(patsubst %.xrc,%.h,$(wildcard *.xrc))


