include $(TOP_DIR)/Makefile_config


#### 最終ターゲット (ふつう、出力バイナリや出力ライブラリ)

target: prepare binary

prepare:
	$(MAKE) INCLUDE_MKTMP=yes make_prepare

ifdef BIN
  binary:
	@$(MAKE) INCLUDE_MKTMP=yes INCLUDE_DEPS=yes $(BIN)
else
 ifdef LIB
  binary:
	@$(MAKE) INCLUDE_MKTMP=yes INCLUDE_DEPS=yes $(LIB)
 endif
endif

make_prepare:
	@if [ ! -d $(BUILD_OUT_DIR)/bin ]; then mkdir -p $(BUILD_OUT_DIR)/bin; fi


#### プロジェクトに必要なファイルなどを列挙して .mktmp に格納

CFLAGS_F    := $(patsubst %,$$(%_CFLAGS),$(DEP_LIBS))
CXXFLAGS_F  := $(patsubst %,$$(%_CXXFLAGS),$(DEP_LIBS))
CPPFLAGS_F  := $(patsubst %,$$(%_CPPFLAGS),$(DEP_LIBS))
LIBS_F      := $(patsubst %,$$(%_LIBS),$(DEP_LIBS))

.mktmp: Makefile
	echo 'DEFAULT_CFLAGS    := $(CFLAGS_F)'    >  .mktmp
	echo 'DEFAULT_CXXFLAGS  := $(CXXFLAGS_F)'  >> .mktmp
	echo 'DEFAULT_CPPFLAGS  := $(CPPFLAGS_F)'  >> .mktmp
	echo 'DEFAULT_LIBS      := $(LIBS_F)'      >> .mktmp

ifdef INCLUDE_MKTMP
 -include .mktmp
endif


###### ルール

## C++ソース→オブジェクトファイル
%.o: %.cpp
	$(CXX) -c $(DEFAULT_CXXFLAGS) $(CXXFLAGS) $(INCLUDES) $< -o $@
ifdef PRESERVE_ASM
#   主にPhase Vocoderをbccに移植するために使用する。
#   特定用途以外に使い道は無いはず
	$(CXX) -c -masm=intel $(DEFAULT_CXXFLAGS) $(CXXFLAGS) $(INCLUDES) $< -S -o $(@:.o=.s)
endif

## yasmソース→オブジェクトファイル

%.o: %.yas
	$(YASM) $(YASM_FLAGS) $< -o $@


## コンパイル済みヘッダ
%.h.gch: %.h
	$(CXX) $(DEFAULT_CXXFLAGS) $(CXXFLAGS) $(INCLUDES) $< -o $@

PREC_H_NAME ?= prec.h

$(PREC_H_NAME).gch: $(PREC_H_NAME)

## 依存関係記述ファイル
$(PREC_H_NAME).d: $(PREC_H_NAME)
	@echo "Generating dependency information for $<"
	@$(CXX) -MM $(DEFAULT_CPPFLAGS) $(CPPFLAGS) $(INCLUDES) $< > "$@t" ;\
	if [ -s "$@t" ]; then \
		echo -n "$(dir $@)" > $@ ;\
		sed -e "s|^$(basename $(notdir $(PREC_H_NAME))).o|$(notdir $(PREC_H_NAME)).gch|" \
			-e "s|: | $@ : |g" $@t >> $@ ;\
	fi; \
	rm -f "$@t"

%.d: %.cpp
	@echo "Generating dependency information for $<"
	@$(CXX) -MM $(DEFAULT_CPPFLAGS) $(CPPFLAGS) $(INCLUDES) $< > "$@t" ;\
	if [ -s "$@t" ]; then \
		echo -n "$(dir $@)" > $@ ;\
		sed "s|: | $@ : |g" $@t >> $@ ;\
	fi; \
	rm -f "$@t"

## 依存関係

ifdef INCLUDE_DEPS
 -include $(CPPFILES:.cpp=.d) $(CFILES:.c=.d) $(PREC_H_NAME).d

endif

## メッセージオブジェクト関連
%.mo: %.po
	$(MSGFMT) -o $@ $<
	mkdir -p $(BUILD_OUT_DIR)/share/locale/$(basename $(notdir $@))/LC_MESSAGES/
	cp $@ $(BUILD_OUT_DIR)/share/locale/$(basename $(notdir $@))/LC_MESSAGES/$(PROGRAM_ID).mo || rm $@

ifdef XRCFILES
 XRCMSG=.xrcmsg
endif

ifdef XRCFILES
 $(XRCMSG): $(XRCFILES)
	$(WXRC) --gettext $(XRCFILES) -o $(XRCMSG)
endif

messages.pot: $(CPPFILES) $(CFILES) $(XRCMSG)
	$(XGETTEXT) --from-code=utf-8 -c -C -k_ $^ -o - | \
		sed '/^.POT-Creation-Date:/d' > $@

PO_FILES=$(wildcard locale/*.po)

MESSAGE_OBJECTS=$(PO_FILES:.po=.mo)

$(MESSAGE_OBJECTS): $(PO_FILES)

$(PO_FILES): messages.pot
	$(MSGMERGE) --update $@ messages.pot
	touch $@

## XRC 関連

%.cpp: %.xrc
	mv $< $<.bak
	sed -e 's/^[	 ]*//g' -e 's/[	 ]*$$//g' -e '/^$$/d' $<.bak > $<
	rm -f $<.bak
	$(WXRC) --cpp-code --extra-cpp-code $<
	mv resource.cpp $@
	mv resource.h $(@:.cpp=.h)
	mv $@ $@.bak
	sed 's|<wx/wxprec.h>|"$(PREC_H_NAME)"|g' $@.bak > $@
	rm -f $@.bak


$(XRCFILES:.xrc=.cpp): $(XRCFILES)

## バイナリ

ifeq ($(suffix $(BIN)),.a)
# ライブラリの場合
 $(BIN) : $(BIN_DEPS) $(PREC_H_NAME).gch $(OBJS)
	if [ ! -d $(dir $(BIN)) ]; then mkdir -p $(dir $(BIN)) ; fi
	rm -f $(BIN)
	$(AR) rs $(BIN) $(OBJS)
else

ifeq ($(suffix $(BIN)),.o)
# relocatable-objectの場合
 $(BIN) : $(BIN_DEPS) $(PREC_H_NAME).gch $(OBJS)
	if [ ! -d $(dir $(BIN)) ]; then mkdir -p $(dir $(BIN)) ; fi
	rm -f $(BIN)
	$(LD) -r -o $(BIN) $(OBJS)
else

# executableの場合
# リンカドライバとしては CXX を用いる
ifeq (unix,$(PLATFORM))

# unixの場合は、PATHと、DLLを探すパスが異なっているので、
# $(BIN)という名前のラッパスクリプトを作って、そのスクリプトの中から
# $(BIN)-binを呼ぶようにする。
# 
# TODO: Linux以外のラッパスクリプト
 $(BIN) : $(BIN_DEPS) $(PREC_H_NAME).gch $(OBJS) $(MESSAGE_OBJECTS)
	if [ ! -d $(dir $(BIN)) ]; then mkdir -p $(dir $(BIN)) ; fi
	$(CXX) $(LDFLAGS) $(OBJS) -o $(BIN)-bin $(LIBS) $(DEFAULT_LIBS)
	@echo '#!/bin/sh -e' > $(BIN)
	@echo 'bindir=`dirname $$0`' >> $(BIN)
	@echo '$(LD_LIBRARY_PATH_ENV_NAME)=$$bindir:$$$(LD_LIBRARY_PATH_ENV_NAME) \
           exec $$bindir/$(notdir $(BIN))-bin $$@' >> $(BIN)
	@chmod a+x $(BIN)


else	# $(PLATFORM) != unix
 $(BIN) : $(BIN_DEPS) $(PREC_H_NAME).gch $(OBJS) $(MESSAGE_OBJECTS)
	if [ ! -d $(dir $(BIN)) ]; then mkdir -p $(dir $(BIN)) ; fi
	$(CXX) $(LDFLAGS) $(OBJS) -o $(BIN) $(LIBS) $(DEFAULT_LIBS)

endif	# $(PLATFORM)

endif
endif

## クリーン

clean:
	rm -f $(OBJS) $(BIN) $(PREC_H_NAME).gch $(PREC_H_NAME).d 
	rm -f messages.pot $(MESSAGE_OBJECTS)
	rm -f locale/*~ $(CPPFILES:.cpp=.d) $(CPPFILES:.cpp=.dt)
	rm -f .mktmp $(CFILES:.c=.d) $(CFILES:.c=.dt)
	rm -f $(CFILES:.c=.s) $(CPPFILES:.cpp=.s)
	rm -f *.bak resource.cpp resource.h
	rm -f $(patsubst %.xrc,%.cpp,$(wildcard *.xrc))
	rm -f $(patsubst %.xrc,%.h,$(wildcard *.xrc))


