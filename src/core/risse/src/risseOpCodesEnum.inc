// generated by tools/opecodes.rb
// do not edit this file by hand

//! @brief オペレーションコードの列挙型
enum tRisseOpCode {
/*   0 */ ocNoOperation /*!< なにもしない */,
/*   1 */ ocAssign /*!< = (ローカル変数の代入) */,
/*   2 */ ocAssignConstant /*!< = 定数の代入 */,
/*   3 */ ocAssignThis /*!< = thisの代入 */,
/*   4 */ ocAssignSuper /*!< = superの代入 */,
/*   5 */ ocAssignGlobal /*!< = globalの代入 */,
/*   6 */ ocAssignNewArray /*!< = 新しい配列オブジェクトの代入 */,
/*   7 */ ocAssignNewDict /*!< = 新しい辞書配列オブジェクトの代入 */,
/*   8 */ ocAssignNewRegExp /*!< = 新しい正規表現オブジェクトの代入 (引数2つ) */,
/*   9 */ ocAssignNewClass /*!< = 新しいクラスインスタンスの代入 (引数=親クラス+クラス名) */,
/*  10 */ ocAssignParam /*!< = (O番目の関数引数を代入) */,
/*  11 */ ocAssignBlockParam /*!< = (O番目の関数ブロック引数を代入) */,
/*  12 */ ocWrite /*!< 共有空間への書き込み */,
/*  13 */ ocRead /*!< 共有空間からの読み込み */,
/*  14 */ ocNew /*!< "new" */,
/*  15 */ ocTryFuncCall /*!< try function call */,
/*  16 */ ocFuncCall /*!< function call */,
/*  17 */ ocFuncCallBlock /*!< function call with lazyblock(VMのみで使用) */,
/*  18 */ ocSetFrame /*!< スタックフレームと共有空間を設定する */,
/*  19 */ ocSetShare /*!< 共有空間のみ設定する */,
/*  20 */ ocJump /*!< 単純なジャンプ */,
/*  21 */ ocBranch /*!< 分岐 */,
/*  22 */ ocCatchBranch /*!< 例外catch用の分岐 */,
/*  23 */ ocReturn /*!< return ステートメント */,
/*  24 */ ocDebugger /*!< debugger ステートメント */,
/*  25 */ ocThrow /*!< throw ステートメント */,
/*  26 */ ocExitTryException /*!< Try脱出用例外を発生させる */,
/*  27 */ ocGetExitTryValue /*!< Try脱出用例外オブジェクトから値を得る */,
/*  28 */ ocLogNot /*!< "!" logical not */,
/*  29 */ ocBitNot /*!< "~" bit not */,
/*  30 */ ocDecAssign /*!< "--" decrement */,
/*  31 */ ocIncAssign /*!< ++ increment */,
/*  32 */ ocPlus /*!< + */,
/*  33 */ ocMinus /*!< - */,
/*  34 */ ocString /*!< 文字列にキャスト */,
/*  35 */ ocBoolean /*!< booleanにキャスト */,
/*  36 */ ocReal /*!< realにキャスト */,
/*  37 */ ocInteger /*!< integerにキャスト */,
/*  38 */ ocLogOr /*!< || */,
/*  39 */ ocLogAnd /*!< && */,
/*  40 */ ocBitOr /*!< | */,
/*  41 */ ocBitXor /*!< ^ */,
/*  42 */ ocBitAnd /*!< & */,
/*  43 */ ocNotEqual /*!< != */,
/*  44 */ ocEqual /*!< == */,
/*  45 */ ocDiscNotEqual /*!< !== */,
/*  46 */ ocDiscEqual /*!< === */,
/*  47 */ ocLesser /*!< < */,
/*  48 */ ocGreater /*!< > */,
/*  49 */ ocLesserOrEqual /*!< <= */,
/*  50 */ ocGreaterOrEqual /*!< >= */,
/*  51 */ ocRBitShift /*!< >>> */,
/*  52 */ ocLShift /*!< << */,
/*  53 */ ocRShift /*!< >> */,
/*  54 */ ocMod /*!< % */,
/*  55 */ ocDiv /*!< / */,
/*  56 */ ocIdiv /*!< \ (integer div) */,
/*  57 */ ocMul /*!< * */,
/*  58 */ ocAdd /*!< + */,
/*  59 */ ocSub /*!< - */,
/*  60 */ ocIncontextOf /*!< incontextof */,
/*  61 */ ocDGet /*!< get .   */,
/*  62 */ ocDGetF /*!< get . with flags (下記参照) */,
/*  63 */ ocIGet /*!< get [ ] */,
/*  64 */ ocDDelete /*!< delete . */,
/*  65 */ ocIDelete /*!< delete [ ] */,
/*  66 */ ocDSetAttrib /*!< set member attribute */,
/*  67 */ ocDSet /*!< set . */,
/*  68 */ ocDSetF /*!< set . with flags (下記参照) */,
/*  69 */ ocISet /*!< set [ ] */,
/*  70 */ ocBitAndAssign /*!< &= */,
/*  71 */ ocBitOrAssign /*!< |= */,
/*  72 */ ocBitXorAssign /*!< ^= */,
/*  73 */ ocSubAssign /*!< -= */,
/*  74 */ ocAddAssign /*!< += */,
/*  75 */ ocModAssign /*!< %= */,
/*  76 */ ocDivAssign /*!< /= */,
/*  77 */ ocIdivAssign /*!< \= */,
/*  78 */ ocMulAssign /*!< *= */,
/*  79 */ ocLogOrAssign /*!< ||= */,
/*  80 */ ocLogAndAssign /*!< &&= */,
/*  81 */ ocRBitShiftAssign /*!< >>>= */,
/*  82 */ ocLShiftAssign /*!< <<= */,
/*  83 */ ocRShiftAssign /*!< >>= */,
/*  84 */ ocVMCodeLast /*!< VMオペコードの最後 */,
/*  85 */ ocSetDefaultContext /*!< メンバを読み出すときにコンテキストがnullだった場合のデフォルトのコンテキストをインスタンスに対して設定する */,
/*  86 */ ocGetDefaultContext /*!< メンバを読み出すときにコンテキストがnullだった場合のデフォルトのコンテキストをインスタンスから取得する */,
/*  87 */ ocCreateNewObjectBase /*!< クラスから新しいインスタンスを作成する際のベースとなるオブジェクトを新たに作成して返す */,
/*  88 */ ocPhi /*!< φ関数 */,
/*  89 */ ocDefineAccessMap /*!< アクセスマップ定義 */,
/*  90 */ ocDefineLazyBlock /*!< 遅延評価ブロックの定義 */,
/*  91 */ ocDefineClass /*!< クラスの定義 */,
/*  92 */ ocEndAccessMap /*!< アクセスマップの使用終了 */,
/*  93 */ ocParentWrite /*!< 親名前空間への書き込み */,
/*  94 */ ocParentRead /*!< 親名前空間からの読み込み */,
/*  95 */ ocChildWrite /*!< 子名前空間への書き込み */,
/*  96 */ ocChildRead /*!< 子名前空間からの読み込み */,
/*  97 */ ocWriteVar /*!< 変数への書き込み(変換の過程でocAssignかocWriteに変わる) */,
/*  98 */ ocReadVar /*!< 変数からの読み込み(変換の過程でocAssignかocReadに変わる) */,
/*  99 */ ocOpCodeLast /*!< オペコードの最後 */,
};
static const tRisseString & mnNew = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocNew].RawMemberName); //!< (演算子メンバ名)  "new"
static const tRisseString & mnBitNot = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocBitNot].RawMemberName); //!< (演算子メンバ名)  "~" bit not
static const tRisseString & mnDecAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocDecAssign].RawMemberName); //!< (演算子メンバ名)  "--" decrement
static const tRisseString & mnIncAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocIncAssign].RawMemberName); //!< (演算子メンバ名)  ++ increment
static const tRisseString & mnPlus = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocPlus].RawMemberName); //!< (演算子メンバ名)  +
static const tRisseString & mnMinus = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocMinus].RawMemberName); //!< (演算子メンバ名)  -
static const tRisseString & mnString = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocString].RawMemberName); //!< (演算子メンバ名)  文字列にキャスト
static const tRisseString & mnBoolean = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocBoolean].RawMemberName); //!< (演算子メンバ名)  booleanにキャスト
static const tRisseString & mnReal = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocReal].RawMemberName); //!< (演算子メンバ名)  realにキャスト
static const tRisseString & mnInteger = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocInteger].RawMemberName); //!< (演算子メンバ名)  integerにキャスト
static const tRisseString & mnLogOr = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocLogOr].RawMemberName); //!< (演算子メンバ名)  ||
static const tRisseString & mnLogAnd = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocLogAnd].RawMemberName); //!< (演算子メンバ名)  &&
static const tRisseString & mnBitOr = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocBitOr].RawMemberName); //!< (演算子メンバ名)  |
static const tRisseString & mnBitXor = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocBitXor].RawMemberName); //!< (演算子メンバ名)  ^
static const tRisseString & mnBitAnd = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocBitAnd].RawMemberName); //!< (演算子メンバ名)  &
static const tRisseString & mnNotEqual = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocNotEqual].RawMemberName); //!< (演算子メンバ名)  !=
static const tRisseString & mnEqual = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocEqual].RawMemberName); //!< (演算子メンバ名)  ==
static const tRisseString & mnDiscNotEqual = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocDiscNotEqual].RawMemberName); //!< (演算子メンバ名)  !==
static const tRisseString & mnDiscEqual = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocDiscEqual].RawMemberName); //!< (演算子メンバ名)  ===
static const tRisseString & mnLesser = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocLesser].RawMemberName); //!< (演算子メンバ名)  <
static const tRisseString & mnGreater = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocGreater].RawMemberName); //!< (演算子メンバ名)  >
static const tRisseString & mnLesserOrEqual = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocLesserOrEqual].RawMemberName); //!< (演算子メンバ名)  <=
static const tRisseString & mnGreaterOrEqual = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocGreaterOrEqual].RawMemberName); //!< (演算子メンバ名)  >=
static const tRisseString & mnRBitShift = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocRBitShift].RawMemberName); //!< (演算子メンバ名)  >>>
static const tRisseString & mnLShift = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocLShift].RawMemberName); //!< (演算子メンバ名)  <<
static const tRisseString & mnRShift = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocRShift].RawMemberName); //!< (演算子メンバ名)  >>
static const tRisseString & mnMod = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocMod].RawMemberName); //!< (演算子メンバ名)  %
static const tRisseString & mnDiv = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocDiv].RawMemberName); //!< (演算子メンバ名)  /
static const tRisseString & mnIdiv = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocIdiv].RawMemberName); //!< (演算子メンバ名)  \ (integer div)
static const tRisseString & mnMul = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocMul].RawMemberName); //!< (演算子メンバ名)  *
static const tRisseString & mnAdd = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocAdd].RawMemberName); //!< (演算子メンバ名)  +
static const tRisseString & mnSub = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocSub].RawMemberName); //!< (演算子メンバ名)  -
static const tRisseString & mnIGet = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocIGet].RawMemberName); //!< (演算子メンバ名)  get [ ]
static const tRisseString & mnIDelete = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocIDelete].RawMemberName); //!< (演算子メンバ名)  delete [ ]
static const tRisseString & mnISet = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocISet].RawMemberName); //!< (演算子メンバ名)  set [ ]
static const tRisseString & mnBitAndAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocBitAndAssign].RawMemberName); //!< (演算子メンバ名)  &=
static const tRisseString & mnBitOrAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocBitOrAssign].RawMemberName); //!< (演算子メンバ名)  |=
static const tRisseString & mnBitXorAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocBitXorAssign].RawMemberName); //!< (演算子メンバ名)  ^=
static const tRisseString & mnSubAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocSubAssign].RawMemberName); //!< (演算子メンバ名)  -=
static const tRisseString & mnAddAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocAddAssign].RawMemberName); //!< (演算子メンバ名)  +=
static const tRisseString & mnModAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocModAssign].RawMemberName); //!< (演算子メンバ名)  %=
static const tRisseString & mnDivAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocDivAssign].RawMemberName); //!< (演算子メンバ名)  /=
static const tRisseString & mnIdivAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocIdivAssign].RawMemberName); //!< (演算子メンバ名)  \=
static const tRisseString & mnMulAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocMulAssign].RawMemberName); //!< (演算子メンバ名)  *=
static const tRisseString & mnLogOrAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocLogOrAssign].RawMemberName); //!< (演算子メンバ名)  ||=
static const tRisseString & mnLogAndAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocLogAndAssign].RawMemberName); //!< (演算子メンバ名)  &&=
static const tRisseString & mnRBitShiftAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocRBitShiftAssign].RawMemberName); //!< (演算子メンバ名)  >>>=
static const tRisseString & mnLShiftAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocLShiftAssign].RawMemberName); //!< (演算子メンバ名)  <<=
static const tRisseString & mnRShiftAssign = *reinterpret_cast<const tRisseString *>(&RisseVMInsnInfo[ocRShiftAssign].RawMemberName); //!< (演算子メンバ名)  >>=
