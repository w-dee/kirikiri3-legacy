// generated by tools/opecodes.rb
// do not edit this file by hand

const tRisseVMInsnInfo RisseVMInsnInfo[] = {
/*   0 */ {"NoOperation", "nop", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  なにもしない */},
/*   1 */ {"Assign", "copy", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  = (ローカル変数の代入) */},
/*   2 */ {"AssignConstant", "const", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifConstant,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  = 定数の代入 */},
/*   3 */ {"AssignThis", "this", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  = thisの代入 */},
/*   4 */ {"AssignSuper", "super", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  = superの代入 */},
/*   5 */ {"AssignGlobal", "global", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  = globalの代入 */},
/*   6 */ {"AssignNewArray", "array", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  = 新しい配列オブジェクトの代入 */},
/*   7 */ {"AssignNewDict", "dict", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  = 新しい辞書配列オブジェクトの代入 */},
/*   8 */ {"AssignNewRegExp", "regexp", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  = 新しい正規表現オブジェクトの代入 (引数2つ) */},
/*   9 */ {"AssignParam", "param", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifParameter,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  = (O番目の関数引数を代入) */},
/*  10 */ {"AssignBlockParam", "bparam", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifParameter,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  = (O番目の関数ブロック引数を代入) */},
/*  11 */ {"Write", "swrite", {tRisseVMInsnInfo::vifShared,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  共有空間への書き込み */},
/*  12 */ {"Read", "sread", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifShared,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  共有空間からの読み込み */},
/*  13 */ {"New", "new", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,tRisseVMInsnInfo::vifNumber,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "new" /*  "new" */},
/*  14 */ {"TryFuncCall", "trycall", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,tRisseVMInsnInfo::vifNumber,tRisseVMInsnInfo::vifNumber,(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  try function call */},
/*  15 */ {"FuncCall", "call", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,tRisseVMInsnInfo::vifNumber,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  function call */},
/*  16 */ {"FuncCallBlock", "callb", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifOthers,tRisseVMInsnInfo::vifNumber,tRisseVMInsnInfo::vifNumber,(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  function call with lazyblock(VMのみで使用) */},
/*  17 */ {"SetFrame", "sframe", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  スタックフレームと共有空間を設定する */},
/*  18 */ {"SetShare", "sshare", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  共有空間のみ設定する */},
/*  19 */ {"Jump", "jump", {tRisseVMInsnInfo::vifAddress,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  単純なジャンプ */},
/*  20 */ {"Branch", "branch", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifAddress,tRisseVMInsnInfo::vifAddress,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  分岐 */},
/*  21 */ {"CatchBranch", "cbranch", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifConstant,tRisseVMInsnInfo::vifNumber,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  例外catch用の分岐 */},
/*  22 */ {"Return", "return", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  return ステートメント */},
/*  23 */ {"Debugger", "debug", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  debugger ステートメント */},
/*  24 */ {"Throw", "throw", {tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  throw ステートメント */},
/*  25 */ {"ExitTryException", "exittry", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifConstant,tRisseVMInsnInfo::vifOthers,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  Try脱出用例外を発生させる */},
/*  26 */ {"GetExitTryValue", "exitval", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  Try脱出用例外オブジェクトから値を得る */},
/*  27 */ {"LogNot", "lnot", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  "!" logical not */},
/*  28 */ {"BitNot", "bnot", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "~" /*  "~" bit not */},
/*  29 */ {"DecAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "--" /*  "--" decrement */},
/*  30 */ {"IncAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "++" /*  ++ increment */},
/*  31 */ {"Plus", "plus", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "+@" /*  + */},
/*  32 */ {"Minus", "minus", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "-@" /*  - */},
/*  33 */ {"LogOr", "lor", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "||" /*  || */},
/*  34 */ {"LogAnd", "land", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "&&" /*  && */},
/*  35 */ {"BitOr", "bor", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "|" /*  | */},
/*  36 */ {"BitXor", "bxor", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "^" /*  ^ */},
/*  37 */ {"BitAnd", "band", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "&" /*  & */},
/*  38 */ {"NotEqual", "ne", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "!=" /*  != */},
/*  39 */ {"Equal", "eq", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "==" /*  == */},
/*  40 */ {"DiscNotEqual", "dne", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "!==" /*  !== */},
/*  41 */ {"DiscEqual", "deq", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "===" /*  === */},
/*  42 */ {"Lesser", "lt", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "<" /*  < */},
/*  43 */ {"Greater", "gt", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, ">" /*  > */},
/*  44 */ {"LesserOrEqual", "lte", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "<=" /*  <= */},
/*  45 */ {"GreaterOrEqual", "gte", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, ">=" /*  >= */},
/*  46 */ {"RBitShift", "rbs", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, ">>>" /*  >>> */},
/*  47 */ {"LShift", "ls", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "<<" /*  << */},
/*  48 */ {"RShift", "rs", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, ">>" /*  >> */},
/*  49 */ {"Mod", "mod", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "%" /*  % */},
/*  50 */ {"Div", "div", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "/" /*  / */},
/*  51 */ {"Idiv", "idiv", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "\\" /*  \ (integer div) */},
/*  52 */ {"Mul", "mul", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "*" /*  * */},
/*  53 */ {"Add", "add", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "+" /*  + */},
/*  54 */ {"Sub", "sub", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "-" /*  - */},
/*  55 */ {"IncontextOf", "chgc", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  incontextof */},
/*  56 */ {"DGet", "dget", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  get .   */},
/*  57 */ {"IGet", "iget", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "[]" /*  get [ ] */},
/*  58 */ {"DDelete", "ddel", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  delete . */},
/*  59 */ {"IDelete", "idel", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "delete[]" /*  delete [ ] */},
/*  60 */ {"DSet", "dset", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  set . */},
/*  61 */ {"ISet", "iset", {tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,tRisseVMInsnInfo::vifRegister,(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "[]=" /*  set [ ] */},
/*  62 */ {"BitAndAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "&=" /*  &= */},
/*  63 */ {"BitOrAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "|=" /*  |= */},
/*  64 */ {"BitXorAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "^=" /*  ^= */},
/*  65 */ {"SubAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "-=" /*  -= */},
/*  66 */ {"AddAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "+=" /*  += */},
/*  67 */ {"ModAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "%=" /*  %= */},
/*  68 */ {"DivAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "/=" /*  /= */},
/*  69 */ {"IdivAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "\\=" /*  \= */},
/*  70 */ {"MulAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "*=" /*  *= */},
/*  71 */ {"LogOrAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "||=" /*  ||= */},
/*  72 */ {"LogAndAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "&&=" /*  &&= */},
/*  73 */ {"RBitShiftAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, ">>>=" /*  >>>= */},
/*  74 */ {"LShiftAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, "<<=" /*  <<= */},
/*  75 */ {"RShiftAssign", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, ">>=" /*  >>= */},
/*  76 */ {"VMCodeLast", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  VMオペコードの最後 */},
/*  77 */ {"Phi", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  φ関数 */},
/*  78 */ {"DefineAccessMap", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  アクセスマップ定義 */},
/*  79 */ {"DefineLazyBlock", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  遅延評価ブロックの定義 */},
/*  80 */ {"EndAccessMap", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  アクセスマップの使用終了 */},
/*  81 */ {"ParentWrite", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  親名前空間への書き込み */},
/*  82 */ {"ParentRead", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  親名前空間からの読み込み */},
/*  83 */ {"ChildWrite", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  子名前空間への書き込み */},
/*  84 */ {"ChildRead", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  子名前空間からの読み込み */},
/*  85 */ {"WriteVar", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  変数への書き込み(変換の過程でocAssignかocWriteに変わる) */},
/*  86 */ {"ReadVar", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  変数からの読み込み(変換の過程でocAssignかocReadに変わる) */},
/*  87 */ {"OpCodeLast", "ERR", {(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0),(tRisseVMInsnInfo::tInsnFlag)(0)}, NULL /*  オペコードの最後 */},
};
