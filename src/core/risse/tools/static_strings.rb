#!/usr/bin/env ruby


# risseStaticString.txt から定義を生成する

# ハッシュの計算

class String
	# このハッシュ表は Risse のハッシュ表で使われているのと同じ方式である。
	# 詳細は risseHashTable.h を参照のこと。
	def make_risse_hash
		hash = 0
		self.each_byte do |byte|
			hash += byte
			hash &= 0xffffffff
			hash += (hash << 10)
			hash &= 0xffffffff
			hash ^= (hash >> 6)
			hash &= 0xffffffff
		end
		hash += (hash << 3)
		hash &= 0xffffffff
		hash ^= (hash >> 11)
		hash &= 0xffffffff
		hash += (hash << 15)
		hash &= 0xffffffff
		hash = 0xffffffff if hash == 0
		hash
	end
end

# 入力ファイルを開いて一行ずつ処理をする
errorcount = 0
linecount = 0
defs = []
File.open(ARGV[0]).readlines.each do |line|
	linecount += 1
	# コメントの除去
	line.gsub!(/\/\/.*/, '')
	# 空白のみになったらその行は処理しない
	next if line =~ /^\s*$/
	# 定義コメントの取り出し
	defcomment = ''
	line.gsub!(/\#!<(.*)/) { defcomment=$1; '' }
	# 行先頭と最後の空白の除去
	line.gsub!(/^\s+/, '')
	line.gsub!(/\s+$/, '')
	# パターンに従って分岐
	if line =~ /(\w+)\s+([^\s]+)$/
		# defs
		defs << { :id => $1, :string => $2, :def_comment => defcomment }
	else
		STDERR.puts "Unrecognized definition at line #{linecount}\n"
		errorcount += 1
	end

end

# words.txt を開いて処理をする
linecount = 0
File.open(ARGV[1]).readlines.each do |line|
	linecount += 1
	# コメントの除去
	line.gsub!(/^#####.*/, '')
	# 空白のみになったらその行は処理しない
	next if line =~ /^\s*$/
	# 行の分解
	sp = line.split(/\s+/)
	# 単語マッチを行う物のみを抽出
	if sp[3] == 'true'
		defs << { :id => 'ss_' + sp[0], :string => sp[0], :def_comment => 'トークンの値' }
	end
end

exit if errorcount != 0

#-----------------------------------------------------------------------

File.open(ARGV[2], "w") do |file|
	# ヘッダを書き出す
file.puts <<EOS
// generated by tools/static_strings.rb
// do not edit this file by hand

extern const tRisseStringData RisseStaticStringTable[];

EOS

	# 演算子メンバ名へのエイリアスを書き出す
	defs.each_index do |index|
		item = defs[index]
		file.puts("static const tRisseString & #{item[:id]} = "+
			"*reinterpret_cast<const tRisseString *>(RisseStaticStringTable+#{index});"+
			" //!< (演算子メンバ名) #{item[:def_comment]}")
	end
end

#-----------------------------------------------------------------------


File.open(ARGV[3], "w") do |file|
	# ヘッダを書き出す
file.puts <<EOS
// generated by tools/static_strings.rb
// do not edit this file by hand

EOS

	# static strings の tRisseString ストレージを書き出す
	offset = 0
	file.puts "//! @brief static strings の文字列領域"
	file.puts "//! @note この領域は tRisseString の文字列ポインタが指す先と"
	file.puts "//!       同じレイアウトになっている"
	file.puts "static risse_char RisseStaticStrings [] = {"
	defs.each_index do |index|
		item = defs[index]
		file.printf "/* %3d, offset=+%4d */", index, offset
		name = item[:string]
		item[:string_offset] = offset
		file.print "tRisseStringData::MightBeShared,"
		name.each_byte do |byte|
			file.print "#{byte.chr.dump.gsub(/^"/,"'").gsub(/"$/,"'")},"
		end
		file.print "0,"  # null terminator
		file.printf "0x%08x,", name.make_risse_hash  # hash
		offset += name.length + 3
		file.print "\n"
	end
	file.puts "};"

	# tRisseStringData の構造体を書き出す
	file.puts "const tRisseStringData RisseStaticStringTable[] = {"
	defs.each_index do |index|
		item = defs[index]
		file.printf "/* %3d */ ", index
		file.print "{RisseStaticStrings+#{item[:string_offset]+1},#{item[:string].length}}"
		file.puts " /* #{item[:def_comment]} */,"
	end

	file.puts "};"
end

#-----------------------------------------------------------------------


# 終了する
exit 0
