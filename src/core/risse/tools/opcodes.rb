#!/usr/bin/env ruby


# risseOpCodes.txt から定義を生成する

# エスケープ(ただし ' と " と \ しかエスケープしない)
class String
	def escapeC
		t = self.dup
		t.gsub!(/(['\\"])/) { "\\#{$1}" }
		t
	end
end

# 入力ファイルを開いて一行ずつ処理をする
errorcount = 0
linecount = 0
On_defs = {'-' => '(tRisseVMInsnInfo::tInsnFlag)(0)'}
defs = []
File.open(ARGV[0]).readlines.each do |line|
	linecount += 1
	# コメントの除去
	line.gsub!(/\/\/.*/, '')
	# 空白のみになったらその行は処理しない
	next if line =~ /^\s*$/
	# 定義コメントの取り出し
	defcomment = ''
	line.gsub!(/\#!<(.*)/) { defcomment=$1; '' }
	# 行先頭と最後の空白の除去
	line.gsub!(/^\s+/, '')
	line.gsub!(/\s+$/, '')
	# パターンに従って分岐
	if    line =~ /^-On\s+([^\s])\s+([^\s]+)$/
		# On_defs
		On_defs[$1] = $2
	elsif line =~ /(\w+)\s+(\w+)\s+([^\s]+)\s+([^\s]+)$/
		# defs
		defs << { :long_id => $1, :mnemonic => $2,
				:On => $3, :member_name => $4, :def_comment => defcomment }
	else
		STDERR.puts "Unrecognized definition at line #{linecount}\n"
		errorcount += 1
	end

end

exit if errorcount != 0

File.open(ARGV[1], "w") do |file|
	# ヘッダを書き出す
file.puts <<EOS
// generated by tools/opecodes.rb
// do not edit this file by hand

EOS

	# 列挙型を書き出す
	enumcount = 0
	file.puts "//! @brief オペーレーションコードの列挙型"
	file.puts "enum tRisseOpCode {"
	defs.each do |item|
		file.printf "/* %3d */ ", enumcount
		file.puts "oc#{item[:long_id]} /*!< #{item[:def_comment]} */,"
		enumcount += 1
	end

	file.puts "};"
end

File.open(ARGV[2], "w") do |file|
	# ヘッダを書き出す
file.puts <<EOS
// generated by tools/opecodes.rb
// do not edit this file by hand

EOS

	# tRisseVMInsnInfo の構造体を書き出す
	enumcount = 0
	file.puts "const tRisseVMInsnInfo RisseVMInsnInfo[] = {"
	defs.each do |item|
		file.printf "/* %3d */ {", enumcount
		file.print "\"#{item[:long_id].escapeC}\", \"#{item[:mnemonic].escapeC}\", "
		file.print "{#{item[:On].split(/,/).map{ |i| On_defs[i] }.join(',')}}, "
		if item[:member_name] == '----'
			file.print "NULL"
		else
			file.print "\"#{item[:member_name].escapeC}\""
		end
		file.puts " /* #{item[:def_comment]} */},"
		enumcount += 1
	end

	file.puts "};"
end


# 終了する
exit 0
