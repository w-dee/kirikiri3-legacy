//---------------------------------------------------------------------------
/*
	Risa [りさ]      alias 吉里吉里3 [kirikiri-3]
	 stands for "Risa Is a Stagecraft Architecture"
	Copyright (C) 2000-2007 W.Dee <dee@kikyou.info> and contributors

	See details of license at "license.txt"

	Rina stands for "Rina is an Imaging Network Assembler"
*/
//---------------------------------------------------------------------------
//! @file
//! @brief テスト用のテキストプロバイダノード管理
//---------------------------------------------------------------------------
#include "prec.h"
#include "visual/rina/rinaProcess.h"


namespace Rina {
RISSE_DEFINE_SOURCE_ID(35503,37740,38367,18777,41870,21345,15082,43304);
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
tTextProviderNode::tTextProviderNode(tGraph * graph) : inherited(graph)
{
	Parent = new tTextOutputPin();
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
risse_size tTextProviderNode::GetParentCount()
{
	return 1; // 一つの親にしか情報を提供しない
 }
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
tProcessNode * tTextProviderNode::GetParentAt(risse_size n)
{
	if(n == 0) return Parent; // 親を返す
	return NULL; // TODO: 例外
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
void tTextProviderNode::SetParentAt(risse_size n, tProcessNode * node)
{
	// 親は無いので設定できない
	// TODO: 例外
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
void tTextProviderNode::InsertParentPinAt(risse_size n)
{
	// 親を追加することはできない
	// TODO: 例外
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
void tTextProviderNode::DeleteParentPinAt(risse_size n)
{
	// 親を削除することはできない
	// TODO: 例外
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
risse_size tTextProviderNode::GetChildCount()
{
	return Children.size();
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
tInputPin * tTextProviderNode::GetChildAt(risse_size n)
{
	// XXX: 範囲外例外
	return Children[n];
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
void tTextProviderNode::SetChildAt(risse_size n, tProcessNode * node)
{
	// XXX: ピンのタイプのチェック
	// XXX: 範囲外例外
	Children[n] = node;
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
void tTextProviderNode::InsertChildPinAt(risse_size n)
{
	// XXX: 範囲外例外
	tTextInputPin * newpin = new tTextInputPin();
	newpin->Attatch(this);
	Children.insert(Children.begin() + n, newpin);
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
void tTextProviderNode::DeleteChildPinAt(risse_size n)
{
	// XXX: 範囲外例外
	Children.erase(Children.begin() + n);
}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
}
