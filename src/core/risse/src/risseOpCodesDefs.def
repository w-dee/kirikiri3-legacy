// generated by tools/opecodes.rb
// do not edit this file by hand

// RawMemberNameの領域は tString の文字列ポインタが指す先と
//       同じレイアウトになっている
// risseStaticStrings も似た実装になっているので参照のこと
const tVMInsnInfo VMInsnInfo[] = {
{"NoOperation", "nop", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  なにもしない */},
{"Assign", "copy", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = (ローカル変数の代入) */},
{"AssignConstant", "const", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifConstant,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 定数の代入 */},
{"AssignNewBinding", "binding", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しいバインディングオブジェクトの代入 */},
{"AssignThis", "this", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = thisの代入 */},
{"AssignThisProxy", "proxy", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = this-proxyの代入 */},
{"AssignSuper", "super", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = superの代入 */},
{"AssignGlobal", "global", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = globalの代入 */},
{"AssignNewArray", "array", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しい配列オブジェクトの代入 */},
{"AssignNewDict", "dict", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しい辞書配列オブジェクトの代入 */},
{"AssignNewRegExp", "regexp", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しい正規表現オブジェクトの代入 (引数2つ) */},
{"AssignNewFunction", "func", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しい関数インスタンスの代入 (引数=「裸の」関数インスタンス) */},
{"AssignNewProperty", "prop", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しいプロパティインスタンスの代入 (引数=ゲッタ+セッタ) */},
{"AssignNewClass", "class", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しいクラスインスタンスの代入 (引数=親クラス+クラス名) */},
{"AssignNewModule", "module", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = 新しいモジュールインスタンスの代入 (引数=モジュール名) */},
{"AssignParam", "param", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifParameter,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = (O番目の関数引数を代入) */},
{"AssignBlockParam", "bparam", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifParameter,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  = (O番目の関数ブロック引数を代入) */},
{"AddBindingMap", "bindmap", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifShared,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  ローカル変数のバインディング情報を追加 */},
{"Write", "swrite", {tVMInsnInfo::vifShared,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  共有空間への書き込み */},
{"Read", "sread", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifShared,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  共有空間からの読み込み */},
{"New", "new", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifOthers,tVMInsnInfo::vifNumber,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'n','e','w'>::data.Buffer,3} /*  "new" */},
{"TryFuncCall", "trycall", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifOthers,tVMInsnInfo::vifNumber,tVMInsnInfo::vifNumber,(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  try function call */},
{"Sync", "sync", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  synchronized */},
{"FuncCall", "call", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifOthers,tVMInsnInfo::vifNumber,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'(',')'>::data.Buffer,2} /*  function call */},
{"FuncCallBlock", "callb", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifOthers,tVMInsnInfo::vifNumber,tVMInsnInfo::vifNumber,(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  function call with lazyblock(VMのみで使用) */},
{"SetFrame", "sframe", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  スタックフレームと共有空間を設定する */},
{"SetShare", "sshare", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  共有空間のみ設定する */},
{"Jump", "jump", {tVMInsnInfo::vifAddress,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  単純なジャンプ */},
{"Branch", "branch", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifAddress,tVMInsnInfo::vifAddress,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  分岐 */},
{"CatchBranch", "cbranch", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifConstant,tVMInsnInfo::vifNumber,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  例外catch用の分岐 */},
{"Return", "return", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  return ステートメント */},
{"Debugger", "debug", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  debugger ステートメント */},
{"Throw", "throw", {tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  throw ステートメント */},
{"ExitTryException", "exittry", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifConstant,tVMInsnInfo::vifOthers,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  Try脱出用例外を発生させる */},
{"GetExitTryValue", "exitval", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  Try脱出用例外オブジェクトから値を得る */},
{"LogNot", "lnot", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  "!" logical not */},
{"BitNot", "bnot", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'~'>::data.Buffer,1} /*  "~" bit not */},
{"DecAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'-','-'>::data.Buffer,2} /*  "--" decrement */},
{"IncAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'+','+'>::data.Buffer,2} /*  ++ increment */},
{"Plus", "plus", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'+','@'>::data.Buffer,2} /*  + */},
{"Minus", "minus", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'-','@'>::data.Buffer,2} /*  - */},
{"String", "string", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'t','o','S','t','r','i','n','g'>::data.Buffer,8} /*  文字列にキャスト */},
{"Boolean", "boolean", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'t','o','B','o','o','l','e','a','n'>::data.Buffer,9} /*  booleanにキャスト */},
{"Real", "real", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'t','o','R','e','a','l'>::data.Buffer,6} /*  realにキャスト */},
{"Integer", "integer", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'t','o','I','n','t','e','g','e','r'>::data.Buffer,9} /*  integerにキャスト */},
{"Octet", "octet", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'t','o','O','c','t','e','t'>::data.Buffer,7} /*  octetにキャスト */},
{"LogOr", "lor", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'|','|'>::data.Buffer,2} /*  || */},
{"LogAnd", "land", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'&','&'>::data.Buffer,2} /*  && */},
{"BitOr", "bor", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'|'>::data.Buffer,1} /*  | */},
{"BitXor", "bxor", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'^'>::data.Buffer,1} /*  ^ */},
{"BitAnd", "band", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'&'>::data.Buffer,1} /*  & */},
{"NotEqual", "ne", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'!','='>::data.Buffer,2} /*  != */},
{"Equal", "eq", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'=','='>::data.Buffer,2} /*  == */},
{"DiscNotEqual", "dne", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'!','=','='>::data.Buffer,3} /*  !== */},
{"DiscEqual", "deq", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'=','=','='>::data.Buffer,3} /*  === */},
{"Lesser", "lt", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'<'>::data.Buffer,1} /*  < */},
{"Greater", "gt", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'>'>::data.Buffer,1} /*  > */},
{"LesserOrEqual", "lte", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'<','='>::data.Buffer,2} /*  <= */},
{"GreaterOrEqual", "gte", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'>','='>::data.Buffer,2} /*  >= */},
{"RBitShift", "rbs", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'>','>','>'>::data.Buffer,3} /*  >>> */},
{"LShift", "ls", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'<','<'>::data.Buffer,2} /*  << */},
{"RShift", "rs", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'>','>'>::data.Buffer,2} /*  >> */},
{"Mod", "mod", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'%'>::data.Buffer,1} /*  % */},
{"Div", "div", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'/'>::data.Buffer,1} /*  / */},
{"Idiv", "idiv", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'\\'>::data.Buffer,1} /*  \ (integer div) */},
{"Mul", "mul", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'*'>::data.Buffer,1} /*  * */},
{"Add", "add", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'+'>::data.Buffer,1} /*  + */},
{"Sub", "sub", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'-'>::data.Buffer,1} /*  - */},
{"InContextOf", "cntx", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  incontextof */},
{"InContextOfDyn", "cntxdyn", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  incontextof dynamic */},
{"InstanceOf", "instof", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'i','s','A'>::data.Buffer,3} /*  instanceof (isA) */},
{"DGet", "dget", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  get .   */},
{"DGetF", "dgetf", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifOthers,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  get . with flags (下記参照) */},
{"IGet", "iget", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'[',']'>::data.Buffer,2} /*  get [ ] */},
{"DDelete", "ddel", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  delete . */},
{"IDelete", "idel", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'d','e','l','e','t','e','[',']'>::data.Buffer,8} /*  delete [ ] */},
{"DSetAttrib", "dseta", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifOthers,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  set member attribute */},
{"DSet", "dset", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  set . */},
{"DSetF", "dsetf", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifOthers,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  set . with flags (下記参照) */},
{"ISet", "iset", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,tVMInsnInfo::vifRegister,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'[',']','='>::data.Buffer,3} /*  set [ ] */},
{"Assert", "assert", {tVMInsnInfo::vifRegister,tVMInsnInfo::vifConstant,(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  assertion check */},
{"BitAndAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'&','='>::data.Buffer,2} /*  &= */},
{"BitOrAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'|','='>::data.Buffer,2} /*  |= */},
{"BitXorAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'^','='>::data.Buffer,2} /*  ^= */},
{"SubAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'-','='>::data.Buffer,2} /*  -= */},
{"AddAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'+','='>::data.Buffer,2} /*  += */},
{"ModAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'%','='>::data.Buffer,2} /*  %= */},
{"DivAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'/','='>::data.Buffer,2} /*  /= */},
{"IdivAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'\\','='>::data.Buffer,2} /*  \= */},
{"MulAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'*','='>::data.Buffer,2} /*  *= */},
{"LogOrAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'|','|','='>::data.Buffer,3} /*  ||= */},
{"LogAndAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'&','&','='>::data.Buffer,3} /*  &&= */},
{"RBitShiftAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'>','>','>','='>::data.Buffer,4} /*  >>>= */},
{"LShiftAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'<','<','='>::data.Buffer,3} /*  <<= */},
{"RShiftAssign", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {tSS<'>','>','='>::data.Buffer,3} /*  >>= */},
{"VMCodeLast", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  VMオペコードの最後 */},
{"SetDefaultContext", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  メンバを読み出すときにコンテキストがnullだった場合のデフォルトのコンテキストをインスタンスに対して設定する */},
{"GetDefaultContext", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  メンバを読み出すときにコンテキストがnullだった場合のデフォルトのコンテキストをインスタンスから取得する */},
{"Phi", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  φ関数 */},
{"DefineAccessMap", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  アクセスマップ定義 */},
{"DefineLazyBlock", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  遅延評価ブロックの定義 */},
{"DefineClass", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  クラスの定義 */},
{"EndAccessMap", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  アクセスマップの使用終了 */},
{"ParentWrite", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  親名前空間への書き込み */},
{"ParentRead", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  親名前空間からの読み込み */},
{"ChildWrite", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  子名前空間への書き込み */},
{"ChildRead", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  子名前空間からの読み込み */},
{"WriteVar", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  変数への書き込み(変換の過程でocAssignかocWriteに変わる) */},
{"ReadVar", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  変数からの読み込み(変換の過程でocAssignかocReadに変わる) */},
{"OpCodeLast", "ERR", {(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0),(tVMInsnInfo::tInsnFlag)(0)}, {RISSE_STRING_EMPTY_BUFFER,0} /*  オペコードの最後 */},
};
