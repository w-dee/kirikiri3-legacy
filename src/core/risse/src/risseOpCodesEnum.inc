// generated by tools/opecodes.rb
// do not edit this file by hand

//! @brief オペレーションコードの列挙型
enum tOpCode {
ocNoOperation /*!< なにもしない */,
ocAssign /*!< = (ローカル変数の代入) */,
ocAssignConstant /*!< = 定数の代入 */,
ocAssignNewBinding /*!< = 新しいバインディングオブジェクトの代入 */,
ocAssignThis /*!< = thisの代入 */,
ocAssignThisProxy /*!< = this-proxyの代入 */,
ocAssignSuper /*!< = superの代入 */,
ocAssignGlobal /*!< = globalの代入 */,
ocAssignNewArray /*!< = 新しい配列オブジェクトの代入 */,
ocAssignNewDict /*!< = 新しい辞書配列オブジェクトの代入 */,
ocAssignNewRegExp /*!< = 新しい正規表現オブジェクトの代入 (引数2つ) */,
ocAssignNewFunction /*!< = 新しい関数インスタンスの代入 (引数=「裸の」関数インスタンス) */,
ocAssignNewProperty /*!< = 新しいプロパティインスタンスの代入 (引数=ゲッタ+セッタ) */,
ocAssignNewClass /*!< = 新しいクラスインスタンスの代入 (引数=親クラス+クラス名) */,
ocAssignNewModule /*!< = 新しいモジュールインスタンスの代入 (引数=モジュール名) */,
ocAssignParam /*!< = (O番目の関数引数を代入) */,
ocAssignBlockParam /*!< = (O番目の関数ブロック引数を代入) */,
ocAddBindingMap /*!< ローカル変数のバインディング情報を追加 */,
ocWrite /*!< 共有空間への書き込み */,
ocRead /*!< 共有空間からの読み込み */,
ocNew /*!< "new" */,
ocTryFuncCall /*!< try function call */,
ocSync /*!< synchronized */,
ocFuncCall /*!< function call */,
ocFuncCallBlock /*!< function call with lazyblock(VMのみで使用) */,
ocSetFrame /*!< スタックフレームと共有空間を設定する */,
ocSetShare /*!< 共有空間のみ設定する */,
ocJump /*!< 単純なジャンプ */,
ocBranch /*!< 分岐 */,
ocCatchBranch /*!< 例外catch用の分岐 */,
ocReturn /*!< return ステートメント */,
ocDebugger /*!< debugger ステートメント */,
ocThrow /*!< throw ステートメント */,
ocExitTryException /*!< Try脱出用例外を発生させる */,
ocGetExitTryValue /*!< Try脱出用例外オブジェクトから値を得る */,
ocLogNot /*!< "!" logical not */,
ocBitNot /*!< "~" bit not */,
ocDecAssign /*!< "--" decrement */,
ocIncAssign /*!< ++ increment */,
ocPlus /*!< + */,
ocMinus /*!< - */,
ocString /*!< 文字列にキャスト */,
ocBoolean /*!< booleanにキャスト */,
ocReal /*!< realにキャスト */,
ocInteger /*!< integerにキャスト */,
ocOctet /*!< octetにキャスト */,
ocLogOr /*!< || */,
ocLogAnd /*!< && */,
ocBitOr /*!< | */,
ocBitXor /*!< ^ */,
ocBitAnd /*!< & */,
ocNotEqual /*!< != */,
ocEqual /*!< == */,
ocDiscNotEqual /*!< !== */,
ocDiscEqual /*!< === */,
ocLesser /*!< < */,
ocGreater /*!< > */,
ocLesserOrEqual /*!< <= */,
ocGreaterOrEqual /*!< >= */,
ocRBitShift /*!< >>> */,
ocLShift /*!< << */,
ocRShift /*!< >> */,
ocMod /*!< % */,
ocDiv /*!< / */,
ocIdiv /*!< \ (integer div) */,
ocMul /*!< * */,
ocAdd /*!< + */,
ocSub /*!< - */,
ocInContextOf /*!< incontextof */,
ocInContextOfDyn /*!< incontextof dynamic */,
ocInstanceOf /*!< instanceof (isA) */,
ocDGet /*!< get .   */,
ocDGetF /*!< get . with flags (下記参照) */,
ocIGet /*!< get [ ] */,
ocDDelete /*!< delete . */,
ocIDelete /*!< delete [ ] */,
ocDSetAttrib /*!< set member attribute */,
ocDSet /*!< set . */,
ocDSetF /*!< set . with flags (下記参照) */,
ocISet /*!< set [ ] */,
ocAssert /*!< assertion check */,
ocBitAndAssign /*!< &= */,
ocBitOrAssign /*!< |= */,
ocBitXorAssign /*!< ^= */,
ocSubAssign /*!< -= */,
ocAddAssign /*!< += */,
ocModAssign /*!< %= */,
ocDivAssign /*!< /= */,
ocIdivAssign /*!< \= */,
ocMulAssign /*!< *= */,
ocLogOrAssign /*!< ||= */,
ocLogAndAssign /*!< &&= */,
ocRBitShiftAssign /*!< >>>= */,
ocLShiftAssign /*!< <<= */,
ocRShiftAssign /*!< >>= */,
ocVMCodeLast /*!< VMオペコードの最後 */,
ocSetDefaultContext /*!< メンバを読み出すときにコンテキストがnullだった場合のデフォルトのコンテキストをインスタンスに対して設定する */,
ocGetDefaultContext /*!< メンバを読み出すときにコンテキストがnullだった場合のデフォルトのコンテキストをインスタンスから取得する */,
ocPhi /*!< φ関数 */,
ocDefineAccessMap /*!< アクセスマップ定義 */,
ocDefineLazyBlock /*!< 遅延評価ブロックの定義 */,
ocDefineClass /*!< クラスの定義 */,
ocEndAccessMap /*!< アクセスマップの使用終了 */,
ocParentWrite /*!< 親名前空間への書き込み */,
ocParentRead /*!< 親名前空間からの読み込み */,
ocChildWrite /*!< 子名前空間への書き込み */,
ocChildRead /*!< 子名前空間からの読み込み */,
ocWriteVar /*!< 変数への書き込み(変換の過程でocAssignかocWriteに変わる) */,
ocReadVar /*!< 変数からの読み込み(変換の過程でocAssignかocReadに変わる) */,
ocOpCodeLast /*!< オペコードの最後 */,
};
static const tString & mnNew = *reinterpret_cast<const tString *>(&VMInsnInfo[ocNew].RawMemberName); //!< (演算子メンバ名)  "new"
static const tString & mnFuncCall = *reinterpret_cast<const tString *>(&VMInsnInfo[ocFuncCall].RawMemberName); //!< (演算子メンバ名)  function call
static const tString & mnBitNot = *reinterpret_cast<const tString *>(&VMInsnInfo[ocBitNot].RawMemberName); //!< (演算子メンバ名)  "~" bit not
static const tString & mnDecAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocDecAssign].RawMemberName); //!< (演算子メンバ名)  "--" decrement
static const tString & mnIncAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocIncAssign].RawMemberName); //!< (演算子メンバ名)  ++ increment
static const tString & mnPlus = *reinterpret_cast<const tString *>(&VMInsnInfo[ocPlus].RawMemberName); //!< (演算子メンバ名)  +
static const tString & mnMinus = *reinterpret_cast<const tString *>(&VMInsnInfo[ocMinus].RawMemberName); //!< (演算子メンバ名)  -
static const tString & mnString = *reinterpret_cast<const tString *>(&VMInsnInfo[ocString].RawMemberName); //!< (演算子メンバ名)  文字列にキャスト
static const tString & mnBoolean = *reinterpret_cast<const tString *>(&VMInsnInfo[ocBoolean].RawMemberName); //!< (演算子メンバ名)  booleanにキャスト
static const tString & mnReal = *reinterpret_cast<const tString *>(&VMInsnInfo[ocReal].RawMemberName); //!< (演算子メンバ名)  realにキャスト
static const tString & mnInteger = *reinterpret_cast<const tString *>(&VMInsnInfo[ocInteger].RawMemberName); //!< (演算子メンバ名)  integerにキャスト
static const tString & mnOctet = *reinterpret_cast<const tString *>(&VMInsnInfo[ocOctet].RawMemberName); //!< (演算子メンバ名)  octetにキャスト
static const tString & mnLogOr = *reinterpret_cast<const tString *>(&VMInsnInfo[ocLogOr].RawMemberName); //!< (演算子メンバ名)  ||
static const tString & mnLogAnd = *reinterpret_cast<const tString *>(&VMInsnInfo[ocLogAnd].RawMemberName); //!< (演算子メンバ名)  &&
static const tString & mnBitOr = *reinterpret_cast<const tString *>(&VMInsnInfo[ocBitOr].RawMemberName); //!< (演算子メンバ名)  |
static const tString & mnBitXor = *reinterpret_cast<const tString *>(&VMInsnInfo[ocBitXor].RawMemberName); //!< (演算子メンバ名)  ^
static const tString & mnBitAnd = *reinterpret_cast<const tString *>(&VMInsnInfo[ocBitAnd].RawMemberName); //!< (演算子メンバ名)  &
static const tString & mnNotEqual = *reinterpret_cast<const tString *>(&VMInsnInfo[ocNotEqual].RawMemberName); //!< (演算子メンバ名)  !=
static const tString & mnEqual = *reinterpret_cast<const tString *>(&VMInsnInfo[ocEqual].RawMemberName); //!< (演算子メンバ名)  ==
static const tString & mnDiscNotEqual = *reinterpret_cast<const tString *>(&VMInsnInfo[ocDiscNotEqual].RawMemberName); //!< (演算子メンバ名)  !==
static const tString & mnDiscEqual = *reinterpret_cast<const tString *>(&VMInsnInfo[ocDiscEqual].RawMemberName); //!< (演算子メンバ名)  ===
static const tString & mnLesser = *reinterpret_cast<const tString *>(&VMInsnInfo[ocLesser].RawMemberName); //!< (演算子メンバ名)  <
static const tString & mnGreater = *reinterpret_cast<const tString *>(&VMInsnInfo[ocGreater].RawMemberName); //!< (演算子メンバ名)  >
static const tString & mnLesserOrEqual = *reinterpret_cast<const tString *>(&VMInsnInfo[ocLesserOrEqual].RawMemberName); //!< (演算子メンバ名)  <=
static const tString & mnGreaterOrEqual = *reinterpret_cast<const tString *>(&VMInsnInfo[ocGreaterOrEqual].RawMemberName); //!< (演算子メンバ名)  >=
static const tString & mnRBitShift = *reinterpret_cast<const tString *>(&VMInsnInfo[ocRBitShift].RawMemberName); //!< (演算子メンバ名)  >>>
static const tString & mnLShift = *reinterpret_cast<const tString *>(&VMInsnInfo[ocLShift].RawMemberName); //!< (演算子メンバ名)  <<
static const tString & mnRShift = *reinterpret_cast<const tString *>(&VMInsnInfo[ocRShift].RawMemberName); //!< (演算子メンバ名)  >>
static const tString & mnMod = *reinterpret_cast<const tString *>(&VMInsnInfo[ocMod].RawMemberName); //!< (演算子メンバ名)  %
static const tString & mnDiv = *reinterpret_cast<const tString *>(&VMInsnInfo[ocDiv].RawMemberName); //!< (演算子メンバ名)  /
static const tString & mnIdiv = *reinterpret_cast<const tString *>(&VMInsnInfo[ocIdiv].RawMemberName); //!< (演算子メンバ名)  \ (integer div)
static const tString & mnMul = *reinterpret_cast<const tString *>(&VMInsnInfo[ocMul].RawMemberName); //!< (演算子メンバ名)  *
static const tString & mnAdd = *reinterpret_cast<const tString *>(&VMInsnInfo[ocAdd].RawMemberName); //!< (演算子メンバ名)  +
static const tString & mnSub = *reinterpret_cast<const tString *>(&VMInsnInfo[ocSub].RawMemberName); //!< (演算子メンバ名)  -
static const tString & mnInstanceOf = *reinterpret_cast<const tString *>(&VMInsnInfo[ocInstanceOf].RawMemberName); //!< (演算子メンバ名)  instanceof (isA)
static const tString & mnIGet = *reinterpret_cast<const tString *>(&VMInsnInfo[ocIGet].RawMemberName); //!< (演算子メンバ名)  get [ ]
static const tString & mnIDelete = *reinterpret_cast<const tString *>(&VMInsnInfo[ocIDelete].RawMemberName); //!< (演算子メンバ名)  delete [ ]
static const tString & mnISet = *reinterpret_cast<const tString *>(&VMInsnInfo[ocISet].RawMemberName); //!< (演算子メンバ名)  set [ ]
static const tString & mnBitAndAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocBitAndAssign].RawMemberName); //!< (演算子メンバ名)  &=
static const tString & mnBitOrAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocBitOrAssign].RawMemberName); //!< (演算子メンバ名)  |=
static const tString & mnBitXorAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocBitXorAssign].RawMemberName); //!< (演算子メンバ名)  ^=
static const tString & mnSubAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocSubAssign].RawMemberName); //!< (演算子メンバ名)  -=
static const tString & mnAddAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocAddAssign].RawMemberName); //!< (演算子メンバ名)  +=
static const tString & mnModAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocModAssign].RawMemberName); //!< (演算子メンバ名)  %=
static const tString & mnDivAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocDivAssign].RawMemberName); //!< (演算子メンバ名)  /=
static const tString & mnIdivAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocIdivAssign].RawMemberName); //!< (演算子メンバ名)  \=
static const tString & mnMulAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocMulAssign].RawMemberName); //!< (演算子メンバ名)  *=
static const tString & mnLogOrAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocLogOrAssign].RawMemberName); //!< (演算子メンバ名)  ||=
static const tString & mnLogAndAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocLogAndAssign].RawMemberName); //!< (演算子メンバ名)  &&=
static const tString & mnRBitShiftAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocRBitShiftAssign].RawMemberName); //!< (演算子メンバ名)  >>>=
static const tString & mnLShiftAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocLShiftAssign].RawMemberName); //!< (演算子メンバ名)  <<=
static const tString & mnRShiftAssign = *reinterpret_cast<const tString *>(&VMInsnInfo[ocRShiftAssign].RawMemberName); //!< (演算子メンバ名)  >>=
