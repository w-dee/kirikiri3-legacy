// generated by tools/static_strings.rb
// do not edit this file by hand

extern tStringData data_ss_bool;
static const tString & ss_bool = *reinterpret_cast<const tString *>(&data_ss_bool); //!< (static string) トークンの値 bool
extern tStringData data_ss_boolean;
static const tString & ss_boolean = *reinterpret_cast<const tString *>(&data_ss_boolean); //!< (static string) トークンの値 boolean
extern tStringData data_ss_break;
static const tString & ss_break = *reinterpret_cast<const tString *>(&data_ss_break); //!< (static string) トークンの値 break
extern tStringData data_ss_continue;
static const tString & ss_continue = *reinterpret_cast<const tString *>(&data_ss_continue); //!< (static string) トークンの値 continue
extern tStringData data_ss_const;
static const tString & ss_const = *reinterpret_cast<const tString *>(&data_ss_const); //!< (static string) トークンの値 const
extern tStringData data_ss_catch;
static const tString & ss_catch = *reinterpret_cast<const tString *>(&data_ss_catch); //!< (static string) トークンの値 catch
extern tStringData data_ss_class;
static const tString & ss_class = *reinterpret_cast<const tString *>(&data_ss_class); //!< (static string) トークンの値 class
extern tStringData data_ss_case;
static const tString & ss_case = *reinterpret_cast<const tString *>(&data_ss_case); //!< (static string) トークンの値 case
extern tStringData data_ss_debugger;
static const tString & ss_debugger = *reinterpret_cast<const tString *>(&data_ss_debugger); //!< (static string) トークンの値 debugger
extern tStringData data_ss_default;
static const tString & ss_default = *reinterpret_cast<const tString *>(&data_ss_default); //!< (static string) トークンの値 default
extern tStringData data_ss_delete;
static const tString & ss_delete = *reinterpret_cast<const tString *>(&data_ss_delete); //!< (static string) トークンの値 delete
extern tStringData data_ss_do;
static const tString & ss_do = *reinterpret_cast<const tString *>(&data_ss_do); //!< (static string) トークンの値 do
extern tStringData data_ss_dynamic;
static const tString & ss_dynamic = *reinterpret_cast<const tString *>(&data_ss_dynamic); //!< (static string) トークンの値 dynamic
extern tStringData data_ss_extends;
static const tString & ss_extends = *reinterpret_cast<const tString *>(&data_ss_extends); //!< (static string) トークンの値 extends
extern tStringData data_ss_export;
static const tString & ss_export = *reinterpret_cast<const tString *>(&data_ss_export); //!< (static string) トークンの値 export
extern tStringData data_ss_enum;
static const tString & ss_enum = *reinterpret_cast<const tString *>(&data_ss_enum); //!< (static string) トークンの値 enum
extern tStringData data_ss_else;
static const tString & ss_else = *reinterpret_cast<const tString *>(&data_ss_else); //!< (static string) トークンの値 else
extern tStringData data_ss_function;
static const tString & ss_function = *reinterpret_cast<const tString *>(&data_ss_function); //!< (static string) トークンの値 function
extern tStringData data_ss_finally;
static const tString & ss_finally = *reinterpret_cast<const tString *>(&data_ss_finally); //!< (static string) トークンの値 finally
extern tStringData data_ss_final;
static const tString & ss_final = *reinterpret_cast<const tString *>(&data_ss_final); //!< (static string) トークンの値 final
extern tStringData data_ss_for;
static const tString & ss_for = *reinterpret_cast<const tString *>(&data_ss_for); //!< (static string) トークンの値 for
extern tStringData data_ss_global;
static const tString & ss_global = *reinterpret_cast<const tString *>(&data_ss_global); //!< (static string) トークンの値 global
extern tStringData data_ss_getter;
static const tString & ss_getter = *reinterpret_cast<const tString *>(&data_ss_getter); //!< (static string) トークンの値 getter
extern tStringData data_ss_goto;
static const tString & ss_goto = *reinterpret_cast<const tString *>(&data_ss_goto); //!< (static string) トークンの値 goto
extern tStringData data_ss_incontextof;
static const tString & ss_incontextof = *reinterpret_cast<const tString *>(&data_ss_incontextof); //!< (static string) トークンの値 incontextof
extern tStringData data_ss_invalidate;
static const tString & ss_invalidate = *reinterpret_cast<const tString *>(&data_ss_invalidate); //!< (static string) トークンの値 invalidate
extern tStringData data_ss_instanceof;
static const tString & ss_instanceof = *reinterpret_cast<const tString *>(&data_ss_instanceof); //!< (static string) トークンの値 instanceof
extern tStringData data_ss_isvalid;
static const tString & ss_isvalid = *reinterpret_cast<const tString *>(&data_ss_isvalid); //!< (static string) トークンの値 isvalid
extern tStringData data_ss_import;
static const tString & ss_import = *reinterpret_cast<const tString *>(&data_ss_import); //!< (static string) トークンの値 import
extern tStringData data_ss_int;
static const tString & ss_int = *reinterpret_cast<const tString *>(&data_ss_int); //!< (static string) トークンの値 int
extern tStringData data_ss_integer;
static const tString & ss_integer = *reinterpret_cast<const tString *>(&data_ss_integer); //!< (static string) トークンの値 integer
extern tStringData data_ss_internal;
static const tString & ss_internal = *reinterpret_cast<const tString *>(&data_ss_internal); //!< (static string) トークンの値 internal
extern tStringData data_ss_in;
static const tString & ss_in = *reinterpret_cast<const tString *>(&data_ss_in); //!< (static string) トークンの値 in
extern tStringData data_ss_if;
static const tString & ss_if = *reinterpret_cast<const tString *>(&data_ss_if); //!< (static string) トークンの値 if
extern tStringData data_ss_module;
static const tString & ss_module = *reinterpret_cast<const tString *>(&data_ss_module); //!< (static string) トークンの値 module
extern tStringData data_ss_new;
static const tString & ss_new = *reinterpret_cast<const tString *>(&data_ss_new); //!< (static string) トークンの値 new
extern tStringData data_ss_octet;
static const tString & ss_octet = *reinterpret_cast<const tString *>(&data_ss_octet); //!< (static string) トークンの値 octet
extern tStringData data_ss_protected;
static const tString & ss_protected = *reinterpret_cast<const tString *>(&data_ss_protected); //!< (static string) トークンの値 protected
extern tStringData data_ss_property;
static const tString & ss_property = *reinterpret_cast<const tString *>(&data_ss_property); //!< (static string) トークンの値 property
extern tStringData data_ss_private;
static const tString & ss_private = *reinterpret_cast<const tString *>(&data_ss_private); //!< (static string) トークンの値 private
extern tStringData data_ss_public;
static const tString & ss_public = *reinterpret_cast<const tString *>(&data_ss_public); //!< (static string) トークンの値 public
extern tStringData data_ss_return;
static const tString & ss_return = *reinterpret_cast<const tString *>(&data_ss_return); //!< (static string) トークンの値 return
extern tStringData data_ss_real;
static const tString & ss_real = *reinterpret_cast<const tString *>(&data_ss_real); //!< (static string) トークンの値 real
extern tStringData data_ss_synchronized;
static const tString & ss_synchronized = *reinterpret_cast<const tString *>(&data_ss_synchronized); //!< (static string) トークンの値 synchronized
extern tStringData data_ss_switch;
static const tString & ss_switch = *reinterpret_cast<const tString *>(&data_ss_switch); //!< (static string) トークンの値 switch
extern tStringData data_ss_static;
static const tString & ss_static = *reinterpret_cast<const tString *>(&data_ss_static); //!< (static string) トークンの値 static
extern tStringData data_ss_setter;
static const tString & ss_setter = *reinterpret_cast<const tString *>(&data_ss_setter); //!< (static string) トークンの値 setter
extern tStringData data_ss_string;
static const tString & ss_string = *reinterpret_cast<const tString *>(&data_ss_string); //!< (static string) トークンの値 string
extern tStringData data_ss_super;
static const tString & ss_super = *reinterpret_cast<const tString *>(&data_ss_super); //!< (static string) トークンの値 super
extern tStringData data_ss_typeof;
static const tString & ss_typeof = *reinterpret_cast<const tString *>(&data_ss_typeof); //!< (static string) トークンの値 typeof
extern tStringData data_ss_throw;
static const tString & ss_throw = *reinterpret_cast<const tString *>(&data_ss_throw); //!< (static string) トークンの値 throw
extern tStringData data_ss_this;
static const tString & ss_this = *reinterpret_cast<const tString *>(&data_ss_this); //!< (static string) トークンの値 this
extern tStringData data_ss_try;
static const tString & ss_try = *reinterpret_cast<const tString *>(&data_ss_try); //!< (static string) トークンの値 try
extern tStringData data_ss_using;
static const tString & ss_using = *reinterpret_cast<const tString *>(&data_ss_using); //!< (static string) トークンの値 using
extern tStringData data_ss_var;
static const tString & ss_var = *reinterpret_cast<const tString *>(&data_ss_var); //!< (static string) トークンの値 var
extern tStringData data_ss_while;
static const tString & ss_while = *reinterpret_cast<const tString *>(&data_ss_while); //!< (static string) トークンの値 while
extern tStringData data_ss_with;
static const tString & ss_with = *reinterpret_cast<const tString *>(&data_ss_with); //!< (static string) トークンの値 with
extern tStringData data_ss_as;
static const tString & ss_as = *reinterpret_cast<const tString *>(&data_ss_as); //!< (static string) トークンの値 as
extern tStringData data_ss_use;
static const tString & ss_use = *reinterpret_cast<const tString *>(&data_ss_use); //!< (static string) トークンの値 use
extern tStringData data_ss_abstract;
static const tString & ss_abstract = *reinterpret_cast<const tString *>(&data_ss_abstract); //!< (static string) トークンの値 abstract
extern tStringData data_ss_implements;
static const tString & ss_implements = *reinterpret_cast<const tString *>(&data_ss_implements); //!< (static string) トークンの値 implements
extern tStringData data_ss_interface;
static const tString & ss_interface = *reinterpret_cast<const tString *>(&data_ss_interface); //!< (static string) トークンの値 interface
extern tStringData data_ss_native;
static const tString & ss_native = *reinterpret_cast<const tString *>(&data_ss_native); //!< (static string) トークンの値 native
extern tStringData data_ss_throws;
static const tString & ss_throws = *reinterpret_cast<const tString *>(&data_ss_throws); //!< (static string) トークンの値 throws
extern tStringData data_ss_transient;
static const tString & ss_transient = *reinterpret_cast<const tString *>(&data_ss_transient); //!< (static string) トークンの値 transient
extern tStringData data_ss_volatile;
static const tString & ss_volatile = *reinterpret_cast<const tString *>(&data_ss_volatile); //!< (static string) トークンの値 volatile
extern tStringData data_ss_enumerable;
static const tString & ss_enumerable = *reinterpret_cast<const tString *>(&data_ss_enumerable); //!< (static string) トークンの値 enumerable
extern tStringData data_ss_hidden;
static const tString & ss_hidden = *reinterpret_cast<const tString *>(&data_ss_hidden); //!< (static string) トークンの値 hidden
extern tStringData data_ss_virtual;
static const tString & ss_virtual = *reinterpret_cast<const tString *>(&data_ss_virtual); //!< (static string) トークンの値 virtual
extern tStringData data_ss_field;
static const tString & ss_field = *reinterpret_cast<const tString *>(&data_ss_field); //!< (static string) トークンの値 field
extern tStringData data_ss_void;
static const tString & ss_void = *reinterpret_cast<const tString *>(&data_ss_void); //!< (static string) トークンの値 void
extern tStringData data_ss_null;
static const tString & ss_null = *reinterpret_cast<const tString *>(&data_ss_null); //!< (static string) トークンの値 null
extern tStringData data_ss_true;
static const tString & ss_true = *reinterpret_cast<const tString *>(&data_ss_true); //!< (static string) トークンの値 true
extern tStringData data_ss_false;
static const tString & ss_false = *reinterpret_cast<const tString *>(&data_ss_false); //!< (static string) トークンの値 false
extern tStringData data_ss_NaN;
static const tString & ss_NaN = *reinterpret_cast<const tString *>(&data_ss_NaN); //!< (static string) トークンの値 NaN
extern tStringData data_ss_Infinity;
static const tString & ss_Infinity = *reinterpret_cast<const tString *>(&data_ss_Infinity); //!< (static string) トークンの値 Infinity
extern tStringData data_ss_doubleColon;
static const tString & ss_doubleColon = *reinterpret_cast<const tString *>(&data_ss_doubleColon); //!< (static string)  ダブルコロン
extern tStringData data_ss_lastEvalResultHiddenVarName;
static const tString & ss_lastEvalResultHiddenVarName = *reinterpret_cast<const tString *>(&data_ss_lastEvalResultHiddenVarName); //!< (static string)  最後に評価した文や式の結果を格納するための隠し変数名
extern tStringData data_ss_thisProxyHiddenVarName;
static const tString & ss_thisProxyHiddenVarName = *reinterpret_cast<const tString *>(&data_ss_thisProxyHiddenVarName); //!< (static string)  this-proxy を格納するための隠し変数名
extern tStringData data_ss_members;
static const tString & ss_members = *reinterpret_cast<const tString *>(&data_ss_members); //!< (static string)  "members" インスタンス変数/プロパティ名
extern tStringData data_ss_initialize;
static const tString & ss_initialize = *reinterpret_cast<const tString *>(&data_ss_initialize); //!< (static string)  "initialize" メソッド名
extern tStringData data_ss_construct;
static const tString & ss_construct = *reinterpret_cast<const tString *>(&data_ss_construct); //!< (static string)  "construct" メソッド名
extern tStringData data_ss_fertilize;
static const tString & ss_fertilize = *reinterpret_cast<const tString *>(&data_ss_fertilize); //!< (static string)  "fertilize" メソッド名
extern tStringData data_ss_ovulate;
static const tString & ss_ovulate = *reinterpret_cast<const tString *>(&data_ss_ovulate); //!< (static string)  "ovulate" メソッド名
extern tStringData data_ss_getInstanceMember;
static const tString & ss_getInstanceMember = *reinterpret_cast<const tString *>(&data_ss_getInstanceMember); //!< (static string)  "getInstanceMember" メソッド名
extern tStringData data_ss_setInstanceMember;
static const tString & ss_setInstanceMember = *reinterpret_cast<const tString *>(&data_ss_setInstanceMember); //!< (static string)  "setInstanceMember" メソッド名
extern tStringData data_ss_Object;
static const tString & ss_Object = *reinterpret_cast<const tString *>(&data_ss_Object); //!< (static string)  "Object" クラス名
extern tStringData data_ss_Module;
static const tString & ss_Module = *reinterpret_cast<const tString *>(&data_ss_Module); //!< (static string)  "Module" モジュール名
extern tStringData data_ss_Class;
static const tString & ss_Class = *reinterpret_cast<const tString *>(&data_ss_Class); //!< (static string)  "Class" クラス名
extern tStringData data_ss_Function;
static const tString & ss_Function = *reinterpret_cast<const tString *>(&data_ss_Function); //!< (static string)  "Function" クラス名
extern tStringData data_ss_Array;
static const tString & ss_Array = *reinterpret_cast<const tString *>(&data_ss_Array); //!< (static string)  "Array" クラス名
extern tStringData data_ss_Primitive;
static const tString & ss_Primitive = *reinterpret_cast<const tString *>(&data_ss_Primitive); //!< (static string)  "Primitive" クラス名
extern tStringData data_ss_String;
static const tString & ss_String = *reinterpret_cast<const tString *>(&data_ss_String); //!< (static string)  "String" クラス名
extern tStringData data_ss_Number;
static const tString & ss_Number = *reinterpret_cast<const tString *>(&data_ss_Number); //!< (static string)  "Number" クラス名
extern tStringData data_ss_Integer;
static const tString & ss_Integer = *reinterpret_cast<const tString *>(&data_ss_Integer); //!< (static string)  "Integer" クラス名
extern tStringData data_ss_Property;
static const tString & ss_Property = *reinterpret_cast<const tString *>(&data_ss_Property); //!< (static string)  "Property" クラス名
extern tStringData data_ss_Real;
static const tString & ss_Real = *reinterpret_cast<const tString *>(&data_ss_Real); //!< (static string)  "Real" クラス名
extern tStringData data_ss_prototype;
static const tString & ss_prototype = *reinterpret_cast<const tString *>(&data_ss_prototype); //!< (static string)  "prototype" インスタンス変数/プロパティ名
extern tStringData data_ss_modules;
static const tString & ss_modules = *reinterpret_cast<const tString *>(&data_ss_modules); //!< (static string)  "modules" インスタンス変数/プロパティ名
extern tStringData data_ss_push;
static const tString & ss_push = *reinterpret_cast<const tString *>(&data_ss_push); //!< (static string)  "push" メソッド名
extern tStringData data_ss_pop;
static const tString & ss_pop = *reinterpret_cast<const tString *>(&data_ss_pop); //!< (static string)  "pop" メソッド名
extern tStringData data_ss_unshift;
static const tString & ss_unshift = *reinterpret_cast<const tString *>(&data_ss_unshift); //!< (static string)  "unshift" メソッド名
extern tStringData data_ss_shift;
static const tString & ss_shift = *reinterpret_cast<const tString *>(&data_ss_shift); //!< (static string)  "shift" メソッド名
extern tStringData data_ss_charAt;
static const tString & ss_charAt = *reinterpret_cast<const tString *>(&data_ss_charAt); //!< (static string)  "charAt" メソッド名
extern tStringData data_ss_length;
static const tString & ss_length = *reinterpret_cast<const tString *>(&data_ss_length); //!< (static string)  "length" プロパティ名
extern tStringData data_ss_times;
static const tString & ss_times = *reinterpret_cast<const tString *>(&data_ss_times); //!< (static string)  "times" メソッド名
extern tStringData data_ss_isNaN;
static const tString & ss_isNaN = *reinterpret_cast<const tString *>(&data_ss_isNaN); //!< (static string)  "isNaN" プロパティ名
extern tStringData data_ss_filler;
static const tString & ss_filler = *reinterpret_cast<const tString *>(&data_ss_filler); //!< (static string)  "filler" インスタンス変数/プロパティ名
extern tStringData data_ss_include;
static const tString & ss_include = *reinterpret_cast<const tString *>(&data_ss_include); //!< (static string)  "include" メソッド名
extern tStringData data_ss_Throwable;
static const tString & ss_Throwable = *reinterpret_cast<const tString *>(&data_ss_Throwable); //!< (static string)  "Throwable" クラス名
extern tStringData data_ss_message;
static const tString & ss_message = *reinterpret_cast<const tString *>(&data_ss_message); //!< (static string)  "message" インスタンス変数/プロパティ名
extern tStringData data_ss_trace;
static const tString & ss_trace = *reinterpret_cast<const tString *>(&data_ss_trace); //!< (static string)  "trace" インスタンス変数/プロパティ名
extern tStringData data_ss_cause;
static const tString & ss_cause = *reinterpret_cast<const tString *>(&data_ss_cause); //!< (static string)  "cause" インスタンス変数/プロパティ名
extern tStringData data_ss_addTrace;
static const tString & ss_addTrace = *reinterpret_cast<const tString *>(&data_ss_addTrace); //!< (static string)  "addTrace" メソッド名
extern tStringData data_ss_SourcePoint;
static const tString & ss_SourcePoint = *reinterpret_cast<const tString *>(&data_ss_SourcePoint); //!< (static string)  "SourcePoint" クラス名
extern tStringData data_ss_position;
static const tString & ss_position = *reinterpret_cast<const tString *>(&data_ss_position); //!< (static string)  "position" インスタンス変数/プロパティ名
extern tStringData data_ss_filename;
static const tString & ss_filename = *reinterpret_cast<const tString *>(&data_ss_filename); //!< (static string)  "filename" インスタンス変数/プロパティ名
extern tStringData data_ss_scriptBlock;
static const tString & ss_scriptBlock = *reinterpret_cast<const tString *>(&data_ss_scriptBlock); //!< (static string)  "scriptBlock" インスタンス変数/プロパティ名
extern tStringData data_ss_line;
static const tString & ss_line = *reinterpret_cast<const tString *>(&data_ss_line); //!< (static string)  "line" インスタンス変数/プロパティ名
extern tStringData data_ss_Exception;
static const tString & ss_Exception = *reinterpret_cast<const tString *>(&data_ss_Exception); //!< (static string)  "Exception" クラス名
extern tStringData data_ss_p;
static const tString & ss_p = *reinterpret_cast<const tString *>(&data_ss_p); //!< (static string)  "p" メソッド名
extern tStringData data_ss_isA;
static const tString & ss_isA = *reinterpret_cast<const tString *>(&data_ss_isA); //!< (static string)  "isA" メソッド名
extern tStringData data_ss_BlockExitException;
static const tString & ss_BlockExitException = *reinterpret_cast<const tString *>(&data_ss_BlockExitException); //!< (static string)  "BlockExitException" クラス名
extern tStringData data_ss_identifier;
static const tString & ss_identifier = *reinterpret_cast<const tString *>(&data_ss_identifier); //!< (static string)  "identifier" インスタンス変数/プロパティ名
extern tStringData data_ss_target;
static const tString & ss_target = *reinterpret_cast<const tString *>(&data_ss_target); //!< (static string)  "target" インスタンス変数/プロパティ名
extern tStringData data_ss_value;
static const tString & ss_value = *reinterpret_cast<const tString *>(&data_ss_value); //!< (static string)  "value" インスタンス変数/プロパティ名
extern tStringData data_ss_Error;
static const tString & ss_Error = *reinterpret_cast<const tString *>(&data_ss_Error); //!< (static string)  "Error" クラス名
extern tStringData data_ss_AssertionError;
static const tString & ss_AssertionError = *reinterpret_cast<const tString *>(&data_ss_AssertionError); //!< (static string)  "AssertionError" クラス名
extern tStringData data_ss_RuntimeException;
static const tString & ss_RuntimeException = *reinterpret_cast<const tString *>(&data_ss_RuntimeException); //!< (static string)  "RuntimeException" クラス名
extern tStringData data_ss_toException;
static const tString & ss_toException = *reinterpret_cast<const tString *>(&data_ss_toException); //!< (static string)  "toException" 
extern tStringData data_ss_MemberAccessException;
static const tString & ss_MemberAccessException = *reinterpret_cast<const tString *>(&data_ss_MemberAccessException); //!< (static string)  "MemberAccessException" クラス名
extern tStringData data_ss_NoSuchMemberException;
static const tString & ss_NoSuchMemberException = *reinterpret_cast<const tString *>(&data_ss_NoSuchMemberException); //!< (static string)  "NoSuchMemberException" クラス名
extern tStringData data_ss_name;
static const tString & ss_name = *reinterpret_cast<const tString *>(&data_ss_name); //!< (static string)  "name" インスタンス変数/プロパティ名
extern tStringData data_ss_object;
static const tString & ss_object = *reinterpret_cast<const tString *>(&data_ss_object); //!< (static string)  "object" インスタンス変数/プロパティ名
extern tStringData data_ss_ArgumentException;
static const tString & ss_ArgumentException = *reinterpret_cast<const tString *>(&data_ss_ArgumentException); //!< (static string)  "ArgumentException" クラス名
extern tStringData data_ss_IllegalArgumentException;
static const tString & ss_IllegalArgumentException = *reinterpret_cast<const tString *>(&data_ss_IllegalArgumentException); //!< (static string)  "IllegalArgumentException" クラス名
extern tStringData data_ss_BadArgumentCountException;
static const tString & ss_BadArgumentCountException = *reinterpret_cast<const tString *>(&data_ss_BadArgumentCountException); //!< (static string)  "BadArgumentException" クラス名
extern tStringData data_ss_IllegalMemberAccessException;
static const tString & ss_IllegalMemberAccessException = *reinterpret_cast<const tString *>(&data_ss_IllegalMemberAccessException); //!< (static string)  "IllegalMemberAccessException" クラス名
extern tStringData data_ss_InsufficientResourceException;
static const tString & ss_InsufficientResourceException = *reinterpret_cast<const tString *>(&data_ss_InsufficientResourceException); //!< (static string)  "InsufficientResourceException" クラス名
extern tStringData data_ss_IOException;
static const tString & ss_IOException = *reinterpret_cast<const tString *>(&data_ss_IOException); //!< (static string)  "IOException" クラス名
extern tStringData data_ss_CharConversionException;
static const tString & ss_CharConversionException = *reinterpret_cast<const tString *>(&data_ss_CharConversionException); //!< (static string)  "CharConversionException" クラス名
extern tStringData data_ss_UnsupportedOperationException;
static const tString & ss_UnsupportedOperationException = *reinterpret_cast<const tString *>(&data_ss_UnsupportedOperationException); //!< (static string)  "UnsupportedOperationException" クラス名
extern tStringData data_ss_BadContextException;
static const tString & ss_BadContextException = *reinterpret_cast<const tString *>(&data_ss_BadContextException); //!< (static string)  "BadContextException" クラス名
extern tStringData data_ss_ClassDefinitionException;
static const tString & ss_ClassDefinitionException = *reinterpret_cast<const tString *>(&data_ss_ClassDefinitionException); //!< (static string)  "ClassDefinitionException" クラス名
extern tStringData data_ss_InstantiationException;
static const tString & ss_InstantiationException = *reinterpret_cast<const tString *>(&data_ss_InstantiationException); //!< (static string)  "InstantiationException" クラス名
extern tStringData data_ss_expression;
static const tString & ss_expression = *reinterpret_cast<const tString *>(&data_ss_expression); //!< (static string)  "expression" インスタンス変数/プロパティ名
extern tStringData data_ss_NullObjectException;
static const tString & ss_NullObjectException = *reinterpret_cast<const tString *>(&data_ss_NullObjectException); //!< (static string)  "NullObjectException" クラス名
extern tStringData data_ss_IllegalArgumentTypeException;
static const tString & ss_IllegalArgumentTypeException = *reinterpret_cast<const tString *>(&data_ss_IllegalArgumentTypeException); //!< (static string)  "IllegalArgumentTypeException" クラス名
extern tStringData data_ss_CompileException;
static const tString & ss_CompileException = *reinterpret_cast<const tString *>(&data_ss_CompileException); //!< (static string)  "CompileException" クラス名
extern tStringData data_ss_ArithmeticException;
static const tString & ss_ArithmeticException = *reinterpret_cast<const tString *>(&data_ss_ArithmeticException); //!< (static string)  "ArithmeticException" クラス名
extern tStringData data_ss_extensible;
static const tString & ss_extensible = *reinterpret_cast<const tString *>(&data_ss_extensible); //!< (static string)  "extensible" プロパティ名
extern tStringData data_ss_Binding;
static const tString & ss_Binding = *reinterpret_cast<const tString *>(&data_ss_Binding); //!< (static string)  "Binding" クラス名
extern tStringData data_ss_eval;
static const tString & ss_eval = *reinterpret_cast<const tString *>(&data_ss_eval); //!< (static string)  "eval" メソッド名
extern tStringData data_ss_Coroutine;
static const tString & ss_Coroutine = *reinterpret_cast<const tString *>(&data_ss_Coroutine); //!< (static string)  "Coroutine" クラス名
extern tStringData data_ss_resume;
static const tString & ss_resume = *reinterpret_cast<const tString *>(&data_ss_resume); //!< (static string)  "resume" メソッド名
extern tStringData data_ss_yield;
static const tString & ss_yield = *reinterpret_cast<const tString *>(&data_ss_yield); //!< (static string)  "yield" メソッド名
extern tStringData data_ss_exit;
static const tString & ss_exit = *reinterpret_cast<const tString *>(&data_ss_exit); //!< (static string)  "exit" メソッド名
extern tStringData data_ss_alive;
static const tString & ss_alive = *reinterpret_cast<const tString *>(&data_ss_alive); //!< (static string)  "alive" プロパティ名
extern tStringData data_ss_dispose;
static const tString & ss_dispose = *reinterpret_cast<const tString *>(&data_ss_dispose); //!< (static string)  "dispose" メソッド名
extern tStringData data_ss_CoroutineException;
static const tString & ss_CoroutineException = *reinterpret_cast<const tString *>(&data_ss_CoroutineException); //!< (static string)  "CoroutineException" クラス名
extern tStringData data_ss_ScriptBlock;
static const tString & ss_ScriptBlock = *reinterpret_cast<const tString *>(&data_ss_ScriptBlock); //!< (static string)  "ScriptBlock" クラス名
extern tStringData data_ss_getLineAt;
static const tString & ss_getLineAt = *reinterpret_cast<const tString *>(&data_ss_getLineAt); //!< (static string)  "getLineAt" メソッド名
extern tStringData data_ss_script;
static const tString & ss_script = *reinterpret_cast<const tString *>(&data_ss_script); //!< (static string)  "script" プロパティ名
extern tStringData data_ss_positionToLine;
static const tString & ss_positionToLine = *reinterpret_cast<const tString *>(&data_ss_positionToLine); //!< (static string)  "positionToLine" メソッド名
extern tStringData data_ss_RisseScriptBlock;
static const tString & ss_RisseScriptBlock = *reinterpret_cast<const tString *>(&data_ss_RisseScriptBlock); //!< (static string)  "RisseScriptBlock" クラス名
extern tStringData data_ss_Thread;
static const tString & ss_Thread = *reinterpret_cast<const tString *>(&data_ss_Thread); //!< (static string)  "Thread" クラス名
extern tStringData data_ss_run;
static const tString & ss_run = *reinterpret_cast<const tString *>(&data_ss_run); //!< (static string)  "run" メソッド名
extern tStringData data_ss_start;
static const tString & ss_start = *reinterpret_cast<const tString *>(&data_ss_start); //!< (static string)  "start" メソッド名
extern tStringData data_ss_join;
static const tString & ss_join = *reinterpret_cast<const tString *>(&data_ss_join); //!< (static string)  "join" メソッド名
extern tStringData data_ss_sleep;
static const tString & ss_sleep = *reinterpret_cast<const tString *>(&data_ss_sleep); //!< (static string)  "sleep" メソッド名
extern tStringData data_ss_wakeup;
static const tString & ss_wakeup = *reinterpret_cast<const tString *>(&data_ss_wakeup); //!< (static string)  "wakeup" メソッド名
extern tStringData data_ss_Void;
static const tString & ss_Void = *reinterpret_cast<const tString *>(&data_ss_Void); //!< (static string)  "Void" クラス名
extern tStringData data_ss_dump;
static const tString & ss_dump = *reinterpret_cast<const tString *>(&data_ss_dump); //!< (static string)  "dump" メソッド名
extern tStringData data_ss_Boolean;
static const tString & ss_Boolean = *reinterpret_cast<const tString *>(&data_ss_Boolean); //!< (static string)  "Boolean" クラス名
extern tStringData data_ss_Octet;
static const tString & ss_Octet = *reinterpret_cast<const tString *>(&data_ss_Octet); //!< (static string)  "Octet" クラス名
extern tStringData data_ss_Null;
static const tString & ss_Null = *reinterpret_cast<const tString *>(&data_ss_Null); //!< (static string)  "Null" クラス名
